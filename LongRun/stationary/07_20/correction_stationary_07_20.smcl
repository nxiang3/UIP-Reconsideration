{smcl}
{txt}{sf}{ul off}{.-}
      name:  {res}<unnamed>
       {txt}log:  {res}/Users/wangmengqi/Desktop/UW/Courses/Econ872/Secondpart/task210108/stationary/07_20/correction_stationary_07_20.smcl
  {txt}log type:  {res}smcl
 {txt}opened on:  {res} 8 Jan 2021, 18:01:59
{txt}
{com}. 
. ******************************************************************
. * VAR 
. ******************************************************************
. * CAD
. clear matrix
{txt}
{com}. clear
{txt}
{com}. import delimited "matrix/B_new_CAD.txt", encoding(ISO-8859-1)
{res}{text}(9 vars, 9 obs)

{com}. matrix B_new = [b_new_1[1], b_new_2[1], b_new_3[1], b_new_4[1], b_new_5[1], b_new_6[1], b_new_7[1], b_new_8[1], b_new_9[1] \ ///
>         b_new_1[2], b_new_2[2], b_new_3[2], b_new_4[2], b_new_5[2], b_new_6[2], b_new_7[2], b_new_8[2], b_new_9[2] \ ///
>         b_new_1[3], b_new_2[3], b_new_3[3], b_new_4[3], b_new_5[3], b_new_6[3], b_new_7[3], b_new_8[3], b_new_9[3] \ ///
>         b_new_1[4], b_new_2[4], b_new_3[4], b_new_4[4], b_new_5[4], b_new_6[4], b_new_7[4], b_new_8[4], b_new_9[4] \ ///
>         b_new_1[5], b_new_2[5], b_new_3[5], b_new_4[5], b_new_5[5], b_new_6[5], b_new_7[5], b_new_8[5], b_new_9[5] \ ///
>         b_new_1[6], b_new_2[6], b_new_3[6], b_new_4[6], b_new_5[6], b_new_6[6], b_new_7[6], b_new_8[6], b_new_9[6] \ ///
>         b_new_1[7], b_new_2[7], b_new_3[7], b_new_4[7], b_new_5[7], b_new_6[7], b_new_7[7], b_new_8[7], b_new_9[7] \ ///
>         b_new_1[8], b_new_2[8], b_new_3[8], b_new_4[8], b_new_5[8], b_new_6[8], b_new_7[8], b_new_8[8], b_new_9[8] \ ///
>         b_new_1[9], b_new_2[9], b_new_3[9], b_new_4[9], b_new_5[9], b_new_6[9], b_new_7[9], b_new_8[9], b_new_9[9] ]
{txt}
{com}.         
. matrix e2 = [0, 1, 0, 0, 0, 0, 0, 0, 0]
{txt}
{com}. matrix e3 = [0, 0, 1, 0, 0, 0, 0, 0, 0]
{txt}
{com}. 
. * Check Validility
. matrix eigenvalues r c = B_new
{txt}
{com}. matlist B_new
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .8771554}}}{space 1}{space 1}{ralign 9:{res:{sf:-1.375706}}}{space 1}{space 1}{ralign 9:{res:{sf:-12.52109}}}{space 1}{space 1}{ralign 9:{res:{sf: .1418576}}}{space 1}{space 1}{ralign 9:{res:{sf:-13.92644}}}{space 1}{space 1}{ralign 9:{res:{sf: 23.01577}}}{space 1}{space 1}{ralign 9:{res:{sf:  .021987}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0028627}}}{space 1}{space 1}{ralign 9:{res:{sf:  .944998}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0242058}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0012745}}}{space 1}{space 1}{ralign 9:{res:{sf: .0918568}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1989208}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0016565}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0006298}}}{space 1}{space 1}{ralign 9:{res:{sf: .1779957}}}{space 1}{space 1}{ralign 9:{res:{sf: .5551564}}}{space 1}{space 1}{ralign 9:{res:{sf: .0012812}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1188022}}}{space 1}{space 1}{ralign 9:{res:{sf: .2427623}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0013261}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf:  8.13055}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0359089}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0893157}}}{space 1}{space 1}{ralign 9:{res:{sf:  .218379}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0295464}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0046182}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. matlist r
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: 1.008825}}}{space 1}{space 1}{ralign 9:{res:{sf: .9067055}}}{space 1}{space 1}{ralign 9:{res:{sf: .9067055}}}{space 1}{space 1}{ralign 9:{res:{sf:-.5892068}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2668902}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2668902}}}{space 1}{space 1}{ralign 9:{res:{sf:  .244307}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf:  .244307}}}{space 1}{space 1}{ralign 9:{res:{sf: .1894466}}}{space 1}

{com}. matlist c
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .0395427}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0395427}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .2276829}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2276829}}}{space 1}{space 1}{ralign 9:{res:{sf: .3722817}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.3722817}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. *** Calculation of eigenvalues
.         forval j = 1(1)9{c -(}
{txt}  2{com}.                 scalar eigen`j' = r[1, `j']^2 + c[1, `j']^2
{txt}  3{com}.         {c )-}
{txt}
{com}. 
.         if `=eigen1'<=1 & `=eigen2'<=1 & `=eigen3'<=1 & `=eigen4'<=1 & `=eigen5'<=1 & `=eigen6'<=1 & `=eigen7'<=1 & `=eigen8'<=1 & `=eigen9'<=1 {c -(}
.                 display "Valid"
.         {c )-}
{txt}
{com}.         else{c -(}
.                 display "Invalid"
{res}Invalid
{com}.         {c )-}
{txt}
{com}. 
. * Calculate s_T s_IP s_diff s_diff_shock
. use temp/VAR_CAD_est_07_20.dta, clear
{txt}
{com}. 
. scalar N =_N
{txt}
{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         mat psi`i' = (q_dev[`i']\pi_dev[`i']\i_dev[`i']\q_dev_lag[`i']\pi_dev_lag[`i']\i_dev_lag[`i']\q_dev_lag2[`i']\pi_dev_lag2[`i']\i_dev_lag2[`i'])
{txt}  3{com}. {c )-}
{txt}
{com}. 
. matrix IP = -1*e3 * inv(I(9)-B_new)
{txt}
{com}. matrix T = e2 * B_new * inv(I(9)-B_new)
{txt}
{com}. gen s_T =.
{txt}(160 missing values generated)

{com}. gen s_IP =.
{txt}(160 missing values generated)

{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         matrix temp1 = IP*psi`i'
{txt}  3{com}.         matrix temp2 = T*psi`i'
{txt}  4{com}.         quietly replace s_IP = temp1[1,1] if t == `i'
{txt}  5{com}.         quietly replace s_T = q_dev - temp2[1,1] + s_T_extra if t == `i'
{txt}  6{com}. {c )-}
{txt}
{com}. gen s_diff = s_T - s_IP
{txt}(2 missing values generated)

{com}. 
. xtset cty2 t
{res}{txt}{col 8}panel variable:  {res}cty2 (strongly balanced)
{txt}{col 9}time variable:  {res}{col 25}t, 1 to 160
{txt}{col 17}delta:  {res}1 unit
{txt}
{com}. gen s_diff_shock = d.s_diff
{txt}(3 missing values generated)

{com}. gen i_diff_shock = d.i_diff
{txt}(1 missing value generated)

{com}. 
. save temp/VAR_CAD_correction_stationary_07_20, replace
{txt}(note: file temp/VAR_CAD_correction_stationary_07_20.dta not found)
file temp/VAR_CAD_correction_stationary_07_20.dta saved

{com}. 
. 
. ******************************************************************
. * VAR 
. ******************************************************************
. * CHF
. clear matrix
{txt}
{com}. clear
{txt}
{com}. import delimited "matrix/B_new_CHF.txt", encoding(ISO-8859-1)
{res}{text}(9 vars, 9 obs)

{com}. matrix B_new = [b_new_1[1], b_new_2[1], b_new_3[1], b_new_4[1], b_new_5[1], b_new_6[1], b_new_7[1], b_new_8[1], b_new_9[1] \ ///
>         b_new_1[2], b_new_2[2], b_new_3[2], b_new_4[2], b_new_5[2], b_new_6[2], b_new_7[2], b_new_8[2], b_new_9[2] \ ///
>         b_new_1[3], b_new_2[3], b_new_3[3], b_new_4[3], b_new_5[3], b_new_6[3], b_new_7[3], b_new_8[3], b_new_9[3] \ ///
>         b_new_1[4], b_new_2[4], b_new_3[4], b_new_4[4], b_new_5[4], b_new_6[4], b_new_7[4], b_new_8[4], b_new_9[4] \ ///
>         b_new_1[5], b_new_2[5], b_new_3[5], b_new_4[5], b_new_5[5], b_new_6[5], b_new_7[5], b_new_8[5], b_new_9[5] \ ///
>         b_new_1[6], b_new_2[6], b_new_3[6], b_new_4[6], b_new_5[6], b_new_6[6], b_new_7[6], b_new_8[6], b_new_9[6] \ ///
>         b_new_1[7], b_new_2[7], b_new_3[7], b_new_4[7], b_new_5[7], b_new_6[7], b_new_7[7], b_new_8[7], b_new_9[7] \ ///
>         b_new_1[8], b_new_2[8], b_new_3[8], b_new_4[8], b_new_5[8], b_new_6[8], b_new_7[8], b_new_8[8], b_new_9[8] \ ///
>         b_new_1[9], b_new_2[9], b_new_3[9], b_new_4[9], b_new_5[9], b_new_6[9], b_new_7[9], b_new_8[9], b_new_9[9] ]
{txt}
{com}. 
. matrix e2 = [0, 1, 0, 0, 0, 0, 0, 0, 0]
{txt}
{com}. matrix e3 = [0, 0, 1, 0, 0, 0, 0, 0, 0]
{txt}
{com}. 
. * Check Validility
. matrix eigenvalues r c = B_new
{txt}
{com}. matlist B_new
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .7983611}}}{space 1}{space 1}{ralign 9:{res:{sf:-25.12329}}}{space 1}{space 1}{ralign 9:{res:{sf:-2.685307}}}{space 1}{space 1}{ralign 9:{res:{sf: .1412947}}}{space 1}{space 1}{ralign 9:{res:{sf: 33.15058}}}{space 1}{space 1}{ralign 9:{res:{sf:-23.69731}}}{space 1}{space 1}{ralign 9:{res:{sf: .0311658}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0026815}}}{space 1}{space 1}{ralign 9:{res:{sf: 1.141665}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0053098}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0023594}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2831241}}}{space 1}{space 1}{ralign 9:{res:{sf:  .038011}}}{space 1}{space 1}{ralign 9:{res:{sf: .0016451}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0021475}}}{space 1}{space 1}{ralign 9:{res:{sf: .1699242}}}{space 1}{space 1}{ralign 9:{res:{sf: .6167489}}}{space 1}{space 1}{ralign 9:{res:{sf: .0006091}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1422708}}}{space 1}{space 1}{ralign 9:{res:{sf: .4102699}}}{space 1}{space 1}{ralign 9:{res:{sf:  .001152}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: -12.7338}}}{space 1}{space 1}{ralign 9:{res:{sf: 24.27459}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: -.022534}}}{space 1}{space 1}{ralign 9:{res:{sf: .0868049}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0318308}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0731363}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. matlist r
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.4929882}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2792637}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2792637}}}{space 1}{space 1}{ralign 9:{res:{sf: .9853364}}}{space 1}{space 1}{ralign 9:{res:{sf: .8613237}}}{space 1}{space 1}{ralign 9:{res:{sf: .8613237}}}{space 1}{space 1}{ralign 9:{res:{sf: .2502528}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .2502528}}}{space 1}{space 1}{ralign 9:{res:{sf: .3998012}}}{space 1}

{com}. matlist c
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .4149777}}}{space 1}{space 1}{ralign 9:{res:{sf:-.4149777}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .0412053}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0412053}}}{space 1}{space 1}{ralign 9:{res:{sf: .1701652}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.1701652}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. *** Calculation of eigenvalues
.         forval j = 1(1)9{c -(}
{txt}  2{com}.                 scalar eigen`j' = r[1, `j']^2 + c[1, `j']^2
{txt}  3{com}.         {c )-}
{txt}
{com}. 
.         if `=eigen1'<=1 & `=eigen2'<=1 & `=eigen3'<=1 & `=eigen4'<=1 & `=eigen5'<=1 & `=eigen6'<=1 & `=eigen7'<=1 & `=eigen8'<=1 & `=eigen9'<=1 {c -(}
.                 display "Valid"
{res}Valid
{com}.         {c )-}
{txt}
{com}.         else{c -(}
.                 display "Invalid"
.         {c )-}
{txt}
{com}. 
. * Calculate s_T s_IP s_diff s_diff_shock
. use temp/VAR_CHF_est_07_20.dta, clear
{txt}
{com}. 
. scalar N =_N
{txt}
{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         mat psi`i' = (q_dev[`i']\pi_dev[`i']\i_dev[`i']\q_dev_lag[`i']\pi_dev_lag[`i']\i_dev_lag[`i']\q_dev_lag2[`i']\pi_dev_lag2[`i']\i_dev_lag2[`i'])
{txt}  3{com}. {c )-}
{txt}
{com}. 
. matrix IP = -1*e3 * inv(I(9)-B_new)
{txt}
{com}. matrix T = e2 * B_new * inv(I(9)-B_new)
{txt}
{com}. gen s_T =.
{txt}(160 missing values generated)

{com}. gen s_IP =.
{txt}(160 missing values generated)

{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         matrix temp1 = IP*psi`i'
{txt}  3{com}.         matrix temp2 = T*psi`i'
{txt}  4{com}.         quietly replace s_IP = temp1[1,1] if t == `i'
{txt}  5{com}.         quietly replace s_T = q_dev - temp2[1,1] + s_T_extra if t == `i'
{txt}  6{com}. {c )-}
{txt}
{com}. gen s_diff = s_T - s_IP
{txt}(2 missing values generated)

{com}. 
. xtset cty2 t
{res}{txt}{col 8}panel variable:  {res}cty2 (strongly balanced)
{txt}{col 9}time variable:  {res}{col 25}t, 1 to 160
{txt}{col 17}delta:  {res}1 unit
{txt}
{com}. gen s_diff_shock = d.s_diff
{txt}(3 missing values generated)

{com}. gen i_diff_shock = d.i_diff
{txt}(1 missing value generated)

{com}. 
. save temp/VAR_CHF_correction_stationary_07_20, replace
{txt}(note: file temp/VAR_CHF_correction_stationary_07_20.dta not found)
file temp/VAR_CHF_correction_stationary_07_20.dta saved

{com}. 
. ******************************************************************
. * VAR 
. ******************************************************************
. * DEM
. clear matrix
{txt}
{com}. clear
{txt}
{com}. import delimited "matrix/B_new_DEM.txt", encoding(ISO-8859-1)
{res}{text}(9 vars, 9 obs)

{com}. matrix B_new = [b_new_1[1], b_new_2[1], b_new_3[1], b_new_4[1], b_new_5[1], b_new_6[1], b_new_7[1], b_new_8[1], b_new_9[1] \ ///
>         b_new_1[2], b_new_2[2], b_new_3[2], b_new_4[2], b_new_5[2], b_new_6[2], b_new_7[2], b_new_8[2], b_new_9[2] \ ///
>         b_new_1[3], b_new_2[3], b_new_3[3], b_new_4[3], b_new_5[3], b_new_6[3], b_new_7[3], b_new_8[3], b_new_9[3] \ ///
>         b_new_1[4], b_new_2[4], b_new_3[4], b_new_4[4], b_new_5[4], b_new_6[4], b_new_7[4], b_new_8[4], b_new_9[4] \ ///
>         b_new_1[5], b_new_2[5], b_new_3[5], b_new_4[5], b_new_5[5], b_new_6[5], b_new_7[5], b_new_8[5], b_new_9[5] \ ///
>         b_new_1[6], b_new_2[6], b_new_3[6], b_new_4[6], b_new_5[6], b_new_6[6], b_new_7[6], b_new_8[6], b_new_9[6] \ ///
>         b_new_1[7], b_new_2[7], b_new_3[7], b_new_4[7], b_new_5[7], b_new_6[7], b_new_7[7], b_new_8[7], b_new_9[7] \ ///
>         b_new_1[8], b_new_2[8], b_new_3[8], b_new_4[8], b_new_5[8], b_new_6[8], b_new_7[8], b_new_8[8], b_new_9[8] \ ///
>         b_new_1[9], b_new_2[9], b_new_3[9], b_new_4[9], b_new_5[9], b_new_6[9], b_new_7[9], b_new_8[9], b_new_9[9] ]
{txt}
{com}. 
. matrix e2 = [0, 1, 0, 0, 0, 0, 0, 0, 0]
{txt}
{com}. matrix e3 = [0, 0, 1, 0, 0, 0, 0, 0, 0]
{txt}
{com}. 
. * Check Validility
. matrix eigenvalues r c = B_new
{txt}
{com}. matlist B_new
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .7835125}}}{space 1}{space 1}{ralign 9:{res:{sf:-18.31115}}}{space 1}{space 1}{ralign 9:{res:{sf:-19.85982}}}{space 1}{space 1}{ralign 9:{res:{sf: .1056175}}}{space 1}{space 1}{ralign 9:{res:{sf: 11.90877}}}{space 1}{space 1}{ralign 9:{res:{sf:-11.15114}}}{space 1}{space 1}{ralign 9:{res:{sf: .1186398}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf:  .002498}}}{space 1}{space 1}{ralign 9:{res:{sf:  1.03526}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0569444}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0011961}}}{space 1}{space 1}{ralign 9:{res:{sf:   .06095}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0028371}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0012837}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0005798}}}{space 1}{space 1}{ralign 9:{res:{sf: .0312406}}}{space 1}{space 1}{ralign 9:{res:{sf: .7567937}}}{space 1}{space 1}{ralign 9:{res:{sf: .0007185}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0334774}}}{space 1}{space 1}{ralign 9:{res:{sf: .3581989}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0006796}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-11.20075}}}{space 1}{space 1}{ralign 9:{res:{sf: 32.45008}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.2469618}}}{space 1}{space 1}{ralign 9:{res:{sf: .0738833}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0119837}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1780749}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. matlist r
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.4587176}}}{space 1}{space 1}{ralign 9:{res:{sf:-.4587176}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1169724}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1169724}}}{space 1}{space 1}{ralign 9:{res:{sf: .3219879}}}{space 1}{space 1}{ralign 9:{res:{sf: .7307482}}}{space 1}{space 1}{ralign 9:{res:{sf: .7307482}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: 1.004768}}}{space 1}{space 1}{ralign 9:{res:{sf: .9386939}}}{space 1}

{com}. matlist c
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0648662}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0648662}}}{space 1}{space 1}{ralign 9:{res:{sf:  .278052}}}{space 1}{space 1}{ralign 9:{res:{sf: -.278052}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .2362397}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2362397}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. *** Calculation of eigenvalues
.         forval j = 1(1)9{c -(}
{txt}  2{com}.                 scalar eigen`j' = r[1, `j']^2 + c[1, `j']^2
{txt}  3{com}.         {c )-}
{txt}
{com}. 
.         if `=eigen1'<=1 & `=eigen2'<=1 & `=eigen3'<=1 & `=eigen4'<=1 & `=eigen5'<=1 & `=eigen6'<=1 & `=eigen7'<=1 & `=eigen8'<=1 & `=eigen9'<=1 {c -(}
.                 display "Valid"
.         {c )-}
{txt}
{com}.         else{c -(}
.                 display "Invalid"
{res}Invalid
{com}.         {c )-}
{txt}
{com}. 
. * Calculate s_T s_IP s_diff s_diff_shock
. use temp/VAR_DEM_est_07_20.dta, clear
{txt}
{com}. 
. scalar N =_N
{txt}
{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         mat psi`i' = (q_dev[`i']\pi_dev[`i']\i_dev[`i']\q_dev_lag[`i']\pi_dev_lag[`i']\i_dev_lag[`i']\q_dev_lag2[`i']\pi_dev_lag2[`i']\i_dev_lag2[`i'])
{txt}  3{com}. {c )-}
{txt}
{com}. 
. matrix IP = -1*e3 * inv(I(9)-B_new)
{txt}
{com}. matrix T = e2 * B_new * inv(I(9)-B_new)
{txt}
{com}. gen s_T =.
{txt}(160 missing values generated)

{com}. gen s_IP =.
{txt}(160 missing values generated)

{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         matrix temp1 = IP*psi`i'
{txt}  3{com}.         matrix temp2 = T*psi`i'
{txt}  4{com}.         quietly replace s_IP = temp1[1,1] if t == `i'
{txt}  5{com}.         quietly replace s_T = q_dev - temp2[1,1] + s_T_extra if t == `i'
{txt}  6{com}. {c )-}
{txt}
{com}. gen s_diff = s_T - s_IP
{txt}(2 missing values generated)

{com}. 
. xtset cty2 t
{res}{txt}{col 8}panel variable:  {res}cty2 (strongly balanced)
{txt}{col 9}time variable:  {res}{col 25}t, 1 to 160
{txt}{col 17}delta:  {res}1 unit
{txt}
{com}. gen s_diff_shock = d.s_diff
{txt}(3 missing values generated)

{com}. gen i_diff_shock = d.i_diff
{txt}(1 missing value generated)

{com}. 
. save temp/VAR_DEM_correction_stationary_07_20, replace
{txt}(note: file temp/VAR_DEM_correction_stationary_07_20.dta not found)
file temp/VAR_DEM_correction_stationary_07_20.dta saved

{com}. 
. ******************************************************************
. * VAR 
. ******************************************************************
. * FRF
. clear matrix
{txt}
{com}. clear
{txt}
{com}. import delimited "matrix/B_new_FRF.txt", encoding(ISO-8859-1)
{res}{text}(9 vars, 9 obs)

{com}. matrix B_new = [b_new_1[1], b_new_2[1], b_new_3[1], b_new_4[1], b_new_5[1], b_new_6[1], b_new_7[1], b_new_8[1], b_new_9[1] \ ///
>         b_new_1[2], b_new_2[2], b_new_3[2], b_new_4[2], b_new_5[2], b_new_6[2], b_new_7[2], b_new_8[2], b_new_9[2] \ ///
>         b_new_1[3], b_new_2[3], b_new_3[3], b_new_4[3], b_new_5[3], b_new_6[3], b_new_7[3], b_new_8[3], b_new_9[3] \ ///
>         b_new_1[4], b_new_2[4], b_new_3[4], b_new_4[4], b_new_5[4], b_new_6[4], b_new_7[4], b_new_8[4], b_new_9[4] \ ///
>         b_new_1[5], b_new_2[5], b_new_3[5], b_new_4[5], b_new_5[5], b_new_6[5], b_new_7[5], b_new_8[5], b_new_9[5] \ ///
>         b_new_1[6], b_new_2[6], b_new_3[6], b_new_4[6], b_new_5[6], b_new_6[6], b_new_7[6], b_new_8[6], b_new_9[6] \ ///
>         b_new_1[7], b_new_2[7], b_new_3[7], b_new_4[7], b_new_5[7], b_new_6[7], b_new_7[7], b_new_8[7], b_new_9[7] \ ///
>         b_new_1[8], b_new_2[8], b_new_3[8], b_new_4[8], b_new_5[8], b_new_6[8], b_new_7[8], b_new_8[8], b_new_9[8] \ ///
>         b_new_1[9], b_new_2[9], b_new_3[9], b_new_4[9], b_new_5[9], b_new_6[9], b_new_7[9], b_new_8[9], b_new_9[9] ]
{txt}
{com}. 
. matrix e2 = [0, 1, 0, 0, 0, 0, 0, 0, 0]
{txt}
{com}. matrix e3 = [0, 0, 1, 0, 0, 0, 0, 0, 0]
{txt}
{com}. 
. * Check Validility
. matrix eigenvalues r c = B_new
{txt}
{com}. matlist B_new
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .8196222}}}{space 1}{space 1}{ralign 9:{res:{sf:-18.56828}}}{space 1}{space 1}{ralign 9:{res:{sf:-20.92601}}}{space 1}{space 1}{ralign 9:{res:{sf: .1492476}}}{space 1}{space 1}{ralign 9:{res:{sf: 17.25541}}}{space 1}{space 1}{ralign 9:{res:{sf: -6.36439}}}{space 1}{space 1}{ralign 9:{res:{sf: .0369885}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0031974}}}{space 1}{space 1}{ralign 9:{res:{sf: 1.150983}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0191089}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0029168}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1541711}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0921535}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0003016}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0006905}}}{space 1}{space 1}{ralign 9:{res:{sf: .1037938}}}{space 1}{space 1}{ralign 9:{res:{sf: .7440902}}}{space 1}{space 1}{ralign 9:{res:{sf:  .000257}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1638713}}}{space 1}{space 1}{ralign 9:{res:{sf: .3564818}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0000334}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-14.16392}}}{space 1}{space 1}{ralign 9:{res:{sf:  29.2306}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.1342763}}}{space 1}{space 1}{ralign 9:{res:{sf: .1311161}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0225458}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1560766}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. matlist r
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.4898465}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1822685}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1822685}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1425855}}}{space 1}{space 1}{ralign 9:{res:{sf: 1.007045}}}{space 1}{space 1}{ralign 9:{res:{sf: .9335599}}}{space 1}{space 1}{ralign 9:{res:{sf: .6835145}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .6835145}}}{space 1}{space 1}{ralign 9:{res:{sf: .4040303}}}{space 1}

{com}. matlist c
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .2189371}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2189371}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .1652798}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.1652798}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. *** Calculation of eigenvalues
.         forval j = 1(1)9{c -(}
{txt}  2{com}.                 scalar eigen`j' = r[1, `j']^2 + c[1, `j']^2
{txt}  3{com}.         {c )-}
{txt}
{com}. 
.         if `=eigen1'<=1 & `=eigen2'<=1 & `=eigen3'<=1 & `=eigen4'<=1 & `=eigen5'<=1 & `=eigen6'<=1 & `=eigen7'<=1 & `=eigen8'<=1 & `=eigen9'<=1 {c -(}
.                 display "Valid"
.         {c )-}
{txt}
{com}.         else{c -(}
.                 display "Invalid"
{res}Invalid
{com}.         {c )-}
{txt}
{com}. 
. * Calculate s_T s_IP s_diff s_diff_shock
. use temp/VAR_FRF_est_07_20.dta, clear
{txt}
{com}. 
. scalar N =_N
{txt}
{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         mat psi`i' = (q_dev[`i']\pi_dev[`i']\i_dev[`i']\q_dev_lag[`i']\pi_dev_lag[`i']\i_dev_lag[`i']\q_dev_lag2[`i']\pi_dev_lag2[`i']\i_dev_lag2[`i'])
{txt}  3{com}. {c )-}
{txt}
{com}. 
. matrix IP = -1*e3 * inv(I(9)-B_new)
{txt}
{com}. matrix T = e2 * B_new * inv(I(9)-B_new)
{txt}
{com}. gen s_T =.
{txt}(160 missing values generated)

{com}. gen s_IP =.
{txt}(160 missing values generated)

{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         matrix temp1 = IP*psi`i'
{txt}  3{com}.         matrix temp2 = T*psi`i'
{txt}  4{com}.         quietly replace s_IP = temp1[1,1] if t == `i'
{txt}  5{com}.         quietly replace s_T = q_dev - temp2[1,1] + s_T_extra if t == `i'
{txt}  6{com}. {c )-}
{txt}
{com}. gen s_diff = s_T - s_IP
{txt}(2 missing values generated)

{com}. 
. xtset cty2 t
{res}{txt}{col 8}panel variable:  {res}cty2 (strongly balanced)
{txt}{col 9}time variable:  {res}{col 25}t, 1 to 160
{txt}{col 17}delta:  {res}1 unit
{txt}
{com}. gen s_diff_shock = d.s_diff
{txt}(3 missing values generated)

{com}. gen i_diff_shock = d.i_diff
{txt}(1 missing value generated)

{com}. 
. save temp/VAR_FRF_correction_stationary_07_20, replace
{txt}(note: file temp/VAR_FRF_correction_stationary_07_20.dta not found)
file temp/VAR_FRF_correction_stationary_07_20.dta saved

{com}. 
. ******************************************************************
. * VAR 
. ******************************************************************
. * GBP
. clear matrix
{txt}
{com}. clear
{txt}
{com}. import delimited "matrix/B_new_GBP.txt", encoding(ISO-8859-1)
{res}{text}(9 vars, 9 obs)

{com}. matrix B_new = [b_new_1[1], b_new_2[1], b_new_3[1], b_new_4[1], b_new_5[1], b_new_6[1], b_new_7[1], b_new_8[1], b_new_9[1] \ ///
>         b_new_1[2], b_new_2[2], b_new_3[2], b_new_4[2], b_new_5[2], b_new_6[2], b_new_7[2], b_new_8[2], b_new_9[2] \ ///
>         b_new_1[3], b_new_2[3], b_new_3[3], b_new_4[3], b_new_5[3], b_new_6[3], b_new_7[3], b_new_8[3], b_new_9[3] \ ///
>         b_new_1[4], b_new_2[4], b_new_3[4], b_new_4[4], b_new_5[4], b_new_6[4], b_new_7[4], b_new_8[4], b_new_9[4] \ ///
>         b_new_1[5], b_new_2[5], b_new_3[5], b_new_4[5], b_new_5[5], b_new_6[5], b_new_7[5], b_new_8[5], b_new_9[5] \ ///
>         b_new_1[6], b_new_2[6], b_new_3[6], b_new_4[6], b_new_5[6], b_new_6[6], b_new_7[6], b_new_8[6], b_new_9[6] \ ///
>         b_new_1[7], b_new_2[7], b_new_3[7], b_new_4[7], b_new_5[7], b_new_6[7], b_new_7[7], b_new_8[7], b_new_9[7] \ ///
>         b_new_1[8], b_new_2[8], b_new_3[8], b_new_4[8], b_new_5[8], b_new_6[8], b_new_7[8], b_new_8[8], b_new_9[8] \ ///
>         b_new_1[9], b_new_2[9], b_new_3[9], b_new_4[9], b_new_5[9], b_new_6[9], b_new_7[9], b_new_8[9], b_new_9[9] ]
{txt}
{com}. 
. matrix e2 = [0, 1, 0, 0, 0, 0, 0, 0, 0]
{txt}
{com}. matrix e3 = [0, 0, 1, 0, 0, 0, 0, 0, 0]
{txt}
{com}. 
. * Check Validility
. matrix eigenvalues r c = B_new
{txt}
{com}. matlist B_new
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .9442469}}}{space 1}{space 1}{ralign 9:{res:{sf:-3.889192}}}{space 1}{space 1}{ralign 9:{res:{sf:-19.03848}}}{space 1}{space 1}{ralign 9:{res:{sf: .1715659}}}{space 1}{space 1}{ralign 9:{res:{sf:  2.77472}}}{space 1}{space 1}{ralign 9:{res:{sf: 11.80023}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1232513}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0024911}}}{space 1}{space 1}{ralign 9:{res:{sf: 1.100508}}}{space 1}{space 1}{ralign 9:{res:{sf: .0168664}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0022164}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1167519}}}{space 1}{space 1}{ralign 9:{res:{sf: -.117926}}}{space 1}{space 1}{ralign 9:{res:{sf: .0003484}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0022225}}}{space 1}{space 1}{ralign 9:{res:{sf: .0059504}}}{space 1}{space 1}{ralign 9:{res:{sf: .4403379}}}{space 1}{space 1}{ralign 9:{res:{sf: .0018783}}}{space 1}{space 1}{ralign 9:{res:{sf: .0086463}}}{space 1}{space 1}{ralign 9:{res:{sf:  .539292}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0005487}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-8.187098}}}{space 1}{space 1}{ralign 9:{res:{sf: 7.356157}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0875431}}}{space 1}{space 1}{ralign 9:{res:{sf: .2250581}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:  -.07031}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0988204}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. matlist r
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: 1.006261}}}{space 1}{space 1}{ralign 9:{res:{sf: .9151207}}}{space 1}{space 1}{ralign 9:{res:{sf: .9151207}}}{space 1}{space 1}{ralign 9:{res:{sf:-.6216046}}}{space 1}{space 1}{ralign 9:{res:{sf:-.4397444}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2703734}}}{space 1}{space 1}{ralign 9:{res:{sf: .3483142}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .3483142}}}{space 1}{space 1}{ralign 9:{res:{sf: .2836848}}}{space 1}

{com}. matlist c
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .1496489}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1496489}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .1848955}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.1848955}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. *** Calculation of eigenvalues
.         forval j = 1(1)9{c -(}
{txt}  2{com}.                 scalar eigen`j' = r[1, `j']^2 + c[1, `j']^2
{txt}  3{com}.         {c )-}
{txt}
{com}. 
.         if `=eigen1'<=1 & `=eigen2'<=1 & `=eigen3'<=1 & `=eigen4'<=1 & `=eigen5'<=1 & `=eigen6'<=1 & `=eigen7'<=1 & `=eigen8'<=1 & `=eigen9'<=1 {c -(}
.                 display "Valid"
.         {c )-}
{txt}
{com}.         else{c -(}
.                 display "Invalid"
{res}Invalid
{com}.         {c )-}
{txt}
{com}. 
. * Calculate s_T s_IP s_diff s_diff_shock
. use temp/VAR_GBP_est_07_20.dta, clear
{txt}
{com}. 
. scalar N =_N
{txt}
{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         mat psi`i' = (q_dev[`i']\pi_dev[`i']\i_dev[`i']\q_dev_lag[`i']\pi_dev_lag[`i']\i_dev_lag[`i']\q_dev_lag2[`i']\pi_dev_lag2[`i']\i_dev_lag2[`i'])
{txt}  3{com}. {c )-}
{txt}
{com}. 
. matrix IP = -1*e3 * inv(I(9)-B_new)
{txt}
{com}. matrix T = e2 * B_new * inv(I(9)-B_new)
{txt}
{com}. gen s_T =.
{txt}(160 missing values generated)

{com}. gen s_IP =.
{txt}(160 missing values generated)

{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         matrix temp1 = IP*psi`i'
{txt}  3{com}.         matrix temp2 = T*psi`i'
{txt}  4{com}.         quietly replace s_IP = temp1[1,1] if t == `i'
{txt}  5{com}.         quietly replace s_T = q_dev - temp2[1,1] + s_T_extra if t == `i'
{txt}  6{com}. {c )-}
{txt}
{com}. gen s_diff = s_T - s_IP
{txt}(2 missing values generated)

{com}. 
. xtset cty2 t
{res}{txt}{col 8}panel variable:  {res}cty2 (strongly balanced)
{txt}{col 9}time variable:  {res}{col 25}t, 1 to 160
{txt}{col 17}delta:  {res}1 unit
{txt}
{com}. gen s_diff_shock = d.s_diff
{txt}(3 missing values generated)

{com}. gen i_diff_shock = d.i_diff
{txt}(1 missing value generated)

{com}. 
. save temp/VAR_GBP_correction_stationary_07_20, replace
{txt}(note: file temp/VAR_GBP_correction_stationary_07_20.dta not found)
file temp/VAR_GBP_correction_stationary_07_20.dta saved

{com}. 
. ******************************************************************
. * VAR 
. ******************************************************************
. * ITL
. clear matrix
{txt}
{com}. clear
{txt}
{com}. import delimited "matrix/B_new_ITL.txt", encoding(ISO-8859-1)
{res}{text}(9 vars, 9 obs)

{com}. matrix B_new = [b_new_1[1], b_new_2[1], b_new_3[1], b_new_4[1], b_new_5[1], b_new_6[1], b_new_7[1], b_new_8[1], b_new_9[1] \ ///
>         b_new_1[2], b_new_2[2], b_new_3[2], b_new_4[2], b_new_5[2], b_new_6[2], b_new_7[2], b_new_8[2], b_new_9[2] \ ///
>         b_new_1[3], b_new_2[3], b_new_3[3], b_new_4[3], b_new_5[3], b_new_6[3], b_new_7[3], b_new_8[3], b_new_9[3] \ ///
>         b_new_1[4], b_new_2[4], b_new_3[4], b_new_4[4], b_new_5[4], b_new_6[4], b_new_7[4], b_new_8[4], b_new_9[4] \ ///
>         b_new_1[5], b_new_2[5], b_new_3[5], b_new_4[5], b_new_5[5], b_new_6[5], b_new_7[5], b_new_8[5], b_new_9[5] \ ///
>         b_new_1[6], b_new_2[6], b_new_3[6], b_new_4[6], b_new_5[6], b_new_6[6], b_new_7[6], b_new_8[6], b_new_9[6] \ ///
>         b_new_1[7], b_new_2[7], b_new_3[7], b_new_4[7], b_new_5[7], b_new_6[7], b_new_7[7], b_new_8[7], b_new_9[7] \ ///
>         b_new_1[8], b_new_2[8], b_new_3[8], b_new_4[8], b_new_5[8], b_new_6[8], b_new_7[8], b_new_8[8], b_new_9[8] \ ///
>         b_new_1[9], b_new_2[9], b_new_3[9], b_new_4[9], b_new_5[9], b_new_6[9], b_new_7[9], b_new_8[9], b_new_9[9] ]
{txt}
{com}. 
. matrix e2 = [0, 1, 0, 0, 0, 0, 0, 0, 0]
{txt}
{com}. matrix e3 = [0, 0, 1, 0, 0, 0, 0, 0, 0]
{txt}
{com}. 
. * Check Validility
. matrix eigenvalues r c = B_new
{txt}
{com}. matlist B_new
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf:  .777751}}}{space 1}{space 1}{ralign 9:{res:{sf:-14.99593}}}{space 1}{space 1}{ralign 9:{res:{sf: -23.2233}}}{space 1}{space 1}{ralign 9:{res:{sf: .1267282}}}{space 1}{space 1}{ralign 9:{res:{sf: 13.70972}}}{space 1}{space 1}{ralign 9:{res:{sf:-7.483003}}}{space 1}{space 1}{ralign 9:{res:{sf: .0869062}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0034437}}}{space 1}{space 1}{ralign 9:{res:{sf: 1.217643}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0640842}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0028163}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1721402}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1146619}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0008685}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf: -.000777}}}{space 1}{space 1}{ralign 9:{res:{sf: .0725034}}}{space 1}{space 1}{ralign 9:{res:{sf: .7286623}}}{space 1}{space 1}{ralign 9:{res:{sf: .0003893}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1275205}}}{space 1}{space 1}{ralign 9:{res:{sf: .3717544}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0001689}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-13.62755}}}{space 1}{space 1}{ralign 9:{res:{sf: 35.12971}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: -.149696}}}{space 1}{space 1}{ralign 9:{res:{sf: .2204251}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0132261}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1480493}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. matlist r
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.4875436}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1494364}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1494364}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2506546}}}{space 1}{space 1}{ralign 9:{res:{sf: 1.016597}}}{space 1}{space 1}{ralign 9:{res:{sf: .8680496}}}{space 1}{space 1}{ralign 9:{res:{sf: .7323189}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .7323189}}}{space 1}{space 1}{ralign 9:{res:{sf: .4118433}}}{space 1}

{com}. matlist c
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .2969679}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2969679}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .0405287}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0405287}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. *** Calculation of eigenvalues
.         forval j = 1(1)9{c -(}
{txt}  2{com}.                 scalar eigen`j' = r[1, `j']^2 + c[1, `j']^2
{txt}  3{com}.         {c )-}
{txt}
{com}. 
.         if `=eigen1'<=1 & `=eigen2'<=1 & `=eigen3'<=1 & `=eigen4'<=1 & `=eigen5'<=1 & `=eigen6'<=1 & `=eigen7'<=1 & `=eigen8'<=1 & `=eigen9'<=1 {c -(}
.                 display "Valid"
.         {c )-}
{txt}
{com}.         else{c -(}
.                 display "Invalid"
{res}Invalid
{com}.         {c )-}
{txt}
{com}. 
. * Calculate s_T s_IP s_diff s_diff_shock
. use temp/VAR_ITL_est_07_20.dta, clear
{txt}
{com}. 
. scalar N =_N
{txt}
{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         mat psi`i' = (q_dev[`i']\pi_dev[`i']\i_dev[`i']\q_dev_lag[`i']\pi_dev_lag[`i']\i_dev_lag[`i']\q_dev_lag2[`i']\pi_dev_lag2[`i']\i_dev_lag2[`i'])
{txt}  3{com}. {c )-}
{txt}
{com}. 
. matrix IP = -1*e3 * inv(I(9)-B_new)
{txt}
{com}. matrix T = e2 * B_new * inv(I(9)-B_new)
{txt}
{com}. gen s_T =.
{txt}(160 missing values generated)

{com}. gen s_IP =.
{txt}(160 missing values generated)

{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         matrix temp1 = IP*psi`i'
{txt}  3{com}.         matrix temp2 = T*psi`i'
{txt}  4{com}.         quietly replace s_IP = temp1[1,1] if t == `i'
{txt}  5{com}.         quietly replace s_T = q_dev - temp2[1,1] + s_T_extra if t == `i'
{txt}  6{com}. {c )-}
{txt}
{com}. gen s_diff = s_T - s_IP
{txt}(2 missing values generated)

{com}. 
. xtset cty2 t
{res}{txt}{col 8}panel variable:  {res}cty2 (strongly balanced)
{txt}{col 9}time variable:  {res}{col 25}t, 1 to 160
{txt}{col 17}delta:  {res}1 unit
{txt}
{com}. gen s_diff_shock = d.s_diff
{txt}(3 missing values generated)

{com}. gen i_diff_shock = d.i_diff
{txt}(1 missing value generated)

{com}. 
. save temp/VAR_ITL_correction_stationary_07_20, replace
{txt}(note: file temp/VAR_ITL_correction_stationary_07_20.dta not found)
file temp/VAR_ITL_correction_stationary_07_20.dta saved

{com}. 
. ******************************************************************
. * VAR 
. ******************************************************************
. * JPY
. clear matrix
{txt}
{com}. clear
{txt}
{com}. import delimited "matrix/B_new_JPY.txt", encoding(ISO-8859-1)
{res}{text}(9 vars, 9 obs)

{com}. matrix B_new = [b_new_1[1], b_new_2[1], b_new_3[1], b_new_4[1], b_new_5[1], b_new_6[1], b_new_7[1], b_new_8[1], b_new_9[1] \ ///
>         b_new_1[2], b_new_2[2], b_new_3[2], b_new_4[2], b_new_5[2], b_new_6[2], b_new_7[2], b_new_8[2], b_new_9[2] \ ///
>         b_new_1[3], b_new_2[3], b_new_3[3], b_new_4[3], b_new_5[3], b_new_6[3], b_new_7[3], b_new_8[3], b_new_9[3] \ ///
>         b_new_1[4], b_new_2[4], b_new_3[4], b_new_4[4], b_new_5[4], b_new_6[4], b_new_7[4], b_new_8[4], b_new_9[4] \ ///
>         b_new_1[5], b_new_2[5], b_new_3[5], b_new_4[5], b_new_5[5], b_new_6[5], b_new_7[5], b_new_8[5], b_new_9[5] \ ///
>         b_new_1[6], b_new_2[6], b_new_3[6], b_new_4[6], b_new_5[6], b_new_6[6], b_new_7[6], b_new_8[6], b_new_9[6] \ ///
>         b_new_1[7], b_new_2[7], b_new_3[7], b_new_4[7], b_new_5[7], b_new_6[7], b_new_7[7], b_new_8[7], b_new_9[7] \ ///
>         b_new_1[8], b_new_2[8], b_new_3[8], b_new_4[8], b_new_5[8], b_new_6[8], b_new_7[8], b_new_8[8], b_new_9[8] \ ///
>         b_new_1[9], b_new_2[9], b_new_3[9], b_new_4[9], b_new_5[9], b_new_6[9], b_new_7[9], b_new_8[9], b_new_9[9] ]
{txt}
{com}. 
. matrix e2 = [0, 1, 0, 0, 0, 0, 0, 0, 0]
{txt}
{com}. matrix e3 = [0, 0, 1, 0, 0, 0, 0, 0, 0]
{txt}
{com}. 
. * Check Validility
. matrix eigenvalues r c = B_new
{txt}
{com}. matlist B_new
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: 1.034998}}}{space 1}{space 1}{ralign 9:{res:{sf:-4.847751}}}{space 1}{space 1}{ralign 9:{res:{sf: 3.954261}}}{space 1}{space 1}{ralign 9:{res:{sf: .0918956}}}{space 1}{space 1}{ralign 9:{res:{sf: 12.63561}}}{space 1}{space 1}{ralign 9:{res:{sf: -.654168}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1425932}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0009783}}}{space 1}{space 1}{ralign 9:{res:{sf:  1.25836}}}{space 1}{space 1}{ralign 9:{res:{sf: .1443622}}}{space 1}{space 1}{ralign 9:{res:{sf: .0007332}}}{space 1}{space 1}{ralign 9:{res:{sf:-.3705783}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1697035}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0011292}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0017592}}}{space 1}{space 1}{ralign 9:{res:{sf: .1109725}}}{space 1}{space 1}{ralign 9:{res:{sf: .5780295}}}{space 1}{space 1}{ralign 9:{res:{sf: .0005329}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0404702}}}{space 1}{space 1}{ralign 9:{res:{sf: .4130109}}}{space 1}{space 1}{ralign 9:{res:{sf: .0009918}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-3.808672}}}{space 1}{space 1}{ralign 9:{res:{sf:-4.146164}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0202496}}}{space 1}{space 1}{ralign 9:{res:{sf:  .079123}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0490144}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0376576}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. matlist r
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: 1.005988}}}{space 1}{space 1}{ralign 9:{res:{sf: .9766384}}}{space 1}{space 1}{ralign 9:{res:{sf: .8409251}}}{space 1}{space 1}{ralign 9:{res:{sf: .4107293}}}{space 1}{space 1}{ralign 9:{res:{sf: .2864724}}}{space 1}{space 1}{ralign 9:{res:{sf: .2864724}}}{space 1}{space 1}{ralign 9:{res:{sf:-.4702032}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.3781426}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0874919}}}{space 1}

{com}. matlist c
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .2360613}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2360613}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. *** Calculation of eigenvalues
.         forval j = 1(1)9{c -(}
{txt}  2{com}.                 scalar eigen`j' = r[1, `j']^2 + c[1, `j']^2
{txt}  3{com}.         {c )-}
{txt}
{com}. 
.         if `=eigen1'<=1 & `=eigen2'<=1 & `=eigen3'<=1 & `=eigen4'<=1 & `=eigen5'<=1 & `=eigen6'<=1 & `=eigen7'<=1 & `=eigen8'<=1 & `=eigen9'<=1 {c -(}
.                 display "Valid"
.         {c )-}
{txt}
{com}.         else{c -(}
.                 display "Invalid"
{res}Invalid
{com}.         {c )-}
{txt}
{com}. 
. * Calculate s_T s_IP s_diff s_diff_shock
. use temp/VAR_JPY_est_07_20.dta, clear
{txt}
{com}. 
. scalar N =_N
{txt}
{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         mat psi`i' = (q_dev[`i']\pi_dev[`i']\i_dev[`i']\q_dev_lag[`i']\pi_dev_lag[`i']\i_dev_lag[`i']\q_dev_lag2[`i']\pi_dev_lag2[`i']\i_dev_lag2[`i'])
{txt}  3{com}. {c )-}
{txt}
{com}. 
. matrix IP = -1*e3 * inv(I(9)-B_new)
{txt}
{com}. matrix T = e2 * B_new * inv(I(9)-B_new)
{txt}
{com}. gen s_T =.
{txt}(160 missing values generated)

{com}. gen s_IP =.
{txt}(160 missing values generated)

{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         matrix temp1 = IP*psi`i'
{txt}  3{com}.         matrix temp2 = T*psi`i'
{txt}  4{com}.         quietly replace s_IP = temp1[1,1] if t == `i'
{txt}  5{com}.         quietly replace s_T = q_dev - temp2[1,1] + s_T_extra if t == `i'
{txt}  6{com}. {c )-}
{txt}
{com}. gen s_diff = s_T - s_IP
{txt}(2 missing values generated)

{com}. 
. xtset cty2 t
{res}{txt}{col 8}panel variable:  {res}cty2 (strongly balanced)
{txt}{col 9}time variable:  {res}{col 25}t, 1 to 160
{txt}{col 17}delta:  {res}1 unit
{txt}
{com}. gen s_diff_shock = d.s_diff
{txt}(3 missing values generated)

{com}. gen i_diff_shock = d.i_diff
{txt}(1 missing value generated)

{com}. 
. save temp/VAR_JPY_correction_stationary_07_20, replace
{txt}(note: file temp/VAR_JPY_correction_stationary_07_20.dta not found)
file temp/VAR_JPY_correction_stationary_07_20.dta saved

{com}. 
. ******************************************************************
. * VAR 
. ******************************************************************
. * NOK
. clear matrix
{txt}
{com}. clear
{txt}
{com}. import delimited "matrix/B_new_NOK.txt", encoding(ISO-8859-1)
{res}{text}(9 vars, 9 obs)

{com}. matrix B_new = [b_new_1[1], b_new_2[1], b_new_3[1], b_new_4[1], b_new_5[1], b_new_6[1], b_new_7[1], b_new_8[1], b_new_9[1] \ ///
>         b_new_1[2], b_new_2[2], b_new_3[2], b_new_4[2], b_new_5[2], b_new_6[2], b_new_7[2], b_new_8[2], b_new_9[2] \ ///
>         b_new_1[3], b_new_2[3], b_new_3[3], b_new_4[3], b_new_5[3], b_new_6[3], b_new_7[3], b_new_8[3], b_new_9[3] \ ///
>         b_new_1[4], b_new_2[4], b_new_3[4], b_new_4[4], b_new_5[4], b_new_6[4], b_new_7[4], b_new_8[4], b_new_9[4] \ ///
>         b_new_1[5], b_new_2[5], b_new_3[5], b_new_4[5], b_new_5[5], b_new_6[5], b_new_7[5], b_new_8[5], b_new_9[5] \ ///
>         b_new_1[6], b_new_2[6], b_new_3[6], b_new_4[6], b_new_5[6], b_new_6[6], b_new_7[6], b_new_8[6], b_new_9[6] \ ///
>         b_new_1[7], b_new_2[7], b_new_3[7], b_new_4[7], b_new_5[7], b_new_6[7], b_new_7[7], b_new_8[7], b_new_9[7] \ ///
>         b_new_1[8], b_new_2[8], b_new_3[8], b_new_4[8], b_new_5[8], b_new_6[8], b_new_7[8], b_new_8[8], b_new_9[8] \ ///
>         b_new_1[9], b_new_2[9], b_new_3[9], b_new_4[9], b_new_5[9], b_new_6[9], b_new_7[9], b_new_8[9], b_new_9[9] ]
{txt}
{com}. 
. matrix e2 = [0, 1, 0, 0, 0, 0, 0, 0, 0]
{txt}
{com}. matrix e3 = [0, 0, 1, 0, 0, 0, 0, 0, 0]
{txt}
{com}. 
. * Check Validility
. matrix eigenvalues r c = B_new
{txt}
{com}. matlist B_new
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf:  .998472}}}{space 1}{space 1}{ralign 9:{res:{sf:-11.36485}}}{space 1}{space 1}{ralign 9:{res:{sf: 3.250031}}}{space 1}{space 1}{ralign 9:{res:{sf: .1469509}}}{space 1}{space 1}{ralign 9:{res:{sf: 11.10164}}}{space 1}{space 1}{ralign 9:{res:{sf: -6.13727}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1172893}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0023088}}}{space 1}{space 1}{ralign 9:{res:{sf: 1.254246}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1569717}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0004039}}}{space 1}{space 1}{ralign 9:{res:{sf:-.4259155}}}{space 1}{space 1}{ralign 9:{res:{sf: .0288313}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0016086}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0008262}}}{space 1}{space 1}{ralign 9:{res:{sf: .0413994}}}{space 1}{space 1}{ralign 9:{res:{sf: .7711366}}}{space 1}{space 1}{ralign 9:{res:{sf:  .000965}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0253989}}}{space 1}{space 1}{ralign 9:{res:{sf:  .397327}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0006034}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-2.871827}}}{space 1}{space 1}{ralign 9:{res:{sf: 5.663473}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0914666}}}{space 1}{space 1}{ralign 9:{res:{sf: .1848895}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf: -.020406}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2462789}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. matlist r
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.5537036}}}{space 1}{space 1}{ralign 9:{res:{sf:-.4313264}}}{space 1}{space 1}{ralign 9:{res:{sf: 1.012542}}}{space 1}{space 1}{ralign 9:{res:{sf: .9173237}}}{space 1}{space 1}{ralign 9:{res:{sf: .9173237}}}{space 1}{space 1}{ralign 9:{res:{sf: .2267912}}}{space 1}{space 1}{ralign 9:{res:{sf: .2267912}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .3540567}}}{space 1}{space 1}{ralign 9:{res:{sf: .3540567}}}{space 1}

{com}. matlist c
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .0587123}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0587123}}}{space 1}{space 1}{ralign 9:{res:{sf:  .300919}}}{space 1}{space 1}{ralign 9:{res:{sf: -.300919}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .1338064}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1338064}}}{space 1}

{com}. *** Calculation of eigenvalues
.         forval j = 1(1)9{c -(}
{txt}  2{com}.                 scalar eigen`j' = r[1, `j']^2 + c[1, `j']^2
{txt}  3{com}.         {c )-}
{txt}
{com}. 
.         if `=eigen1'<=1 & `=eigen2'<=1 & `=eigen3'<=1 & `=eigen4'<=1 & `=eigen5'<=1 & `=eigen6'<=1 & `=eigen7'<=1 & `=eigen8'<=1 & `=eigen9'<=1 {c -(}
.                 display "Valid"
.         {c )-}
{txt}
{com}.         else{c -(}
.                 display "Invalid"
{res}Invalid
{com}.         {c )-}
{txt}
{com}. 
. * Calculate s_T s_IP s_diff s_diff_shock
. use temp/VAR_NOK_est_07_20.dta, clear
{txt}
{com}. 
. scalar N =_N
{txt}
{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         mat psi`i' = (q_dev[`i']\pi_dev[`i']\i_dev[`i']\q_dev_lag[`i']\pi_dev_lag[`i']\i_dev_lag[`i']\q_dev_lag2[`i']\pi_dev_lag2[`i']\i_dev_lag2[`i'])
{txt}  3{com}. {c )-}
{txt}
{com}. 
. matrix IP = -1*e3 * inv(I(9)-B_new)
{txt}
{com}. matrix T = e2 * B_new * inv(I(9)-B_new)
{txt}
{com}. gen s_T =.
{txt}(160 missing values generated)

{com}. gen s_IP =.
{txt}(160 missing values generated)

{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         matrix temp1 = IP*psi`i'
{txt}  3{com}.         matrix temp2 = T*psi`i'
{txt}  4{com}.         quietly replace s_IP = temp1[1,1] if t == `i'
{txt}  5{com}.         quietly replace s_T = q_dev - temp2[1,1] + s_T_extra if t == `i'
{txt}  6{com}. {c )-}
{txt}
{com}. gen s_diff = s_T - s_IP
{txt}(2 missing values generated)

{com}. 
. xtset cty2 t
{res}{txt}{col 8}panel variable:  {res}cty2 (strongly balanced)
{txt}{col 9}time variable:  {res}{col 25}t, 1 to 160
{txt}{col 17}delta:  {res}1 unit
{txt}
{com}. gen s_diff_shock = d.s_diff
{txt}(3 missing values generated)

{com}. gen i_diff_shock = d.i_diff
{txt}(1 missing value generated)

{com}. 
. save temp/VAR_NOK_correction_stationary_07_20, replace
{txt}(note: file temp/VAR_NOK_correction_stationary_07_20.dta not found)
file temp/VAR_NOK_correction_stationary_07_20.dta saved

{com}. 
. ******************************************************************
. * VAR 
. ******************************************************************
. * SEK
. clear matrix
{txt}
{com}. clear
{txt}
{com}. import delimited "matrix/B_new_SEK.txt", encoding(ISO-8859-1)
{res}{text}(9 vars, 9 obs)

{com}. matrix B_new = [b_new_1[1], b_new_2[1], b_new_3[1], b_new_4[1], b_new_5[1], b_new_6[1], b_new_7[1], b_new_8[1], b_new_9[1] \ ///
>         b_new_1[2], b_new_2[2], b_new_3[2], b_new_4[2], b_new_5[2], b_new_6[2], b_new_7[2], b_new_8[2], b_new_9[2] \ ///
>         b_new_1[3], b_new_2[3], b_new_3[3], b_new_4[3], b_new_5[3], b_new_6[3], b_new_7[3], b_new_8[3], b_new_9[3] \ ///
>         b_new_1[4], b_new_2[4], b_new_3[4], b_new_4[4], b_new_5[4], b_new_6[4], b_new_7[4], b_new_8[4], b_new_9[4] \ ///
>         b_new_1[5], b_new_2[5], b_new_3[5], b_new_4[5], b_new_5[5], b_new_6[5], b_new_7[5], b_new_8[5], b_new_9[5] \ ///
>         b_new_1[6], b_new_2[6], b_new_3[6], b_new_4[6], b_new_5[6], b_new_6[6], b_new_7[6], b_new_8[6], b_new_9[6] \ ///
>         b_new_1[7], b_new_2[7], b_new_3[7], b_new_4[7], b_new_5[7], b_new_6[7], b_new_7[7], b_new_8[7], b_new_9[7] \ ///
>         b_new_1[8], b_new_2[8], b_new_3[8], b_new_4[8], b_new_5[8], b_new_6[8], b_new_7[8], b_new_8[8], b_new_9[8] \ ///
>         b_new_1[9], b_new_2[9], b_new_3[9], b_new_4[9], b_new_5[9], b_new_6[9], b_new_7[9], b_new_8[9], b_new_9[9] ]
{txt}
{com}. 
. matrix e2 = [0, 1, 0, 0, 0, 0, 0, 0, 0]
{txt}
{com}. matrix e3 = [0, 0, 1, 0, 0, 0, 0, 0, 0]
{txt}
{com}. 
. * Check Validility
. matrix eigenvalues r c = B_new
{txt}
{com}. matlist B_new
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf:  .962174}}}{space 1}{space 1}{ralign 9:{res:{sf: -5.04248}}}{space 1}{space 1}{ralign 9:{res:{sf:-14.66372}}}{space 1}{space 1}{ralign 9:{res:{sf: .0830883}}}{space 1}{space 1}{ralign 9:{res:{sf:-5.637874}}}{space 1}{space 1}{ralign 9:{res:{sf:-3.449358}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0400992}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0023902}}}{space 1}{space 1}{ralign 9:{res:{sf:  .954129}}}{space 1}{space 1}{ralign 9:{res:{sf: .0538028}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0011374}}}{space 1}{space 1}{ralign 9:{res:{sf: .1034809}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0666136}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0011834}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0012702}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0114889}}}{space 1}{space 1}{ralign 9:{res:{sf:  .800639}}}{space 1}{space 1}{ralign 9:{res:{sf: .0012988}}}{space 1}{space 1}{ralign 9:{res:{sf: .1287978}}}{space 1}{space 1}{ralign 9:{res:{sf: .2538507}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0004906}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: 4.890186}}}{space 1}{space 1}{ralign 9:{res:{sf: 17.29453}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.1825079}}}{space 1}{space 1}{ralign 9:{res:{sf: .0108074}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.1170066}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1140956}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. matlist r
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: 1.007597}}}{space 1}{space 1}{ralign 9:{res:{sf: .9497303}}}{space 1}{space 1}{ralign 9:{res:{sf: .7700016}}}{space 1}{space 1}{ralign 9:{res:{sf: .5169087}}}{space 1}{space 1}{ralign 9:{res:{sf: .5169087}}}{space 1}{space 1}{ralign 9:{res:{sf:-.4079931}}}{space 1}{space 1}{ralign 9:{res:{sf:-.4079931}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.2903844}}}{space 1}{space 1}{ralign 9:{res:{sf: .0621664}}}{space 1}

{com}. matlist c
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .1786626}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1786626}}}{space 1}{space 1}{ralign 9:{res:{sf: .1262547}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1262547}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. *** Calculation of eigenvalues
.         forval j = 1(1)9{c -(}
{txt}  2{com}.                 scalar eigen`j' = r[1, `j']^2 + c[1, `j']^2
{txt}  3{com}.         {c )-}
{txt}
{com}. 
.         if `=eigen1'<=1 & `=eigen2'<=1 & `=eigen3'<=1 & `=eigen4'<=1 & `=eigen5'<=1 & `=eigen6'<=1 & `=eigen7'<=1 & `=eigen8'<=1 & `=eigen9'<=1 {c -(}
.                 display "Valid"
.         {c )-}
{txt}
{com}.         else{c -(}
.                 display "Invalid"
{res}Invalid
{com}.         {c )-}
{txt}
{com}. 
. * Calculate s_T s_IP s_diff s_diff_shock
. use temp/VAR_SEK_est_07_20.dta, clear
{txt}
{com}. 
. scalar N =_N
{txt}
{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         mat psi`i' = (q_dev[`i']\pi_dev[`i']\i_dev[`i']\q_dev_lag[`i']\pi_dev_lag[`i']\i_dev_lag[`i']\q_dev_lag2[`i']\pi_dev_lag2[`i']\i_dev_lag2[`i'])
{txt}  3{com}. {c )-}
{txt}
{com}. 
. matrix IP = -1*e3 * inv(I(9)-B_new)
{txt}
{com}. matrix T = e2 * B_new * inv(I(9)-B_new)
{txt}
{com}. gen s_T =.
{txt}(160 missing values generated)

{com}. gen s_IP =.
{txt}(160 missing values generated)

{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         matrix temp1 = IP*psi`i'
{txt}  3{com}.         matrix temp2 = T*psi`i'
{txt}  4{com}.         quietly replace s_IP = temp1[1,1] if t == `i'
{txt}  5{com}.         quietly replace s_T = q_dev - temp2[1,1] + s_T_extra if t == `i'
{txt}  6{com}. {c )-}
{txt}
{com}. gen s_diff = s_T - s_IP
{txt}(2 missing values generated)

{com}. 
. xtset cty2 t
{res}{txt}{col 8}panel variable:  {res}cty2 (strongly balanced)
{txt}{col 9}time variable:  {res}{col 25}t, 1 to 160
{txt}{col 17}delta:  {res}1 unit
{txt}
{com}. gen s_diff_shock = d.s_diff
{txt}(3 missing values generated)

{com}. gen i_diff_shock = d.i_diff
{txt}(1 missing value generated)

{com}. 
. save temp/VAR_SEK_correction_stationary_07_20, replace
{txt}(note: file temp/VAR_SEK_correction_stationary_07_20.dta not found)
file temp/VAR_SEK_correction_stationary_07_20.dta saved

{com}. 
. log close
      {txt}name:  {res}<unnamed>
       {txt}log:  {res}/Users/wangmengqi/Desktop/UW/Courses/Econ872/Secondpart/task210108/stationary/07_20/correction_stationary_07_20.smcl
  {txt}log type:  {res}smcl
 {txt}closed on:  {res} 8 Jan 2021, 18:01:59
{txt}{.-}
{smcl}
{txt}{sf}{ul off}