{smcl}
{txt}{sf}{ul off}{.-}
      name:  {res}<unnamed>
       {txt}log:  {res}/Users/wangmengqi/Desktop/UW/Courses/Econ872/Secondpart/task210108/nonstationary/87_20/correction_nonstationary_87_20.smcl
  {txt}log type:  {res}smcl
 {txt}opened on:  {res} 8 Jan 2021, 18:27:44
{txt}
{com}. 
. ******************************************************************
. * VAR 
. ******************************************************************
. * CAD
. clear matrix
{txt}
{com}. clear
{txt}
{com}. import delimited "matrix/B_new_CAD.txt", encoding(ISO-8859-1)
{res}{text}(9 vars, 9 obs)

{com}. matrix B_new = [b_new_1[1], b_new_2[1], b_new_3[1], b_new_4[1], b_new_5[1], b_new_6[1], b_new_7[1], b_new_8[1], b_new_9[1] \ ///
>         b_new_1[2], b_new_2[2], b_new_3[2], b_new_4[2], b_new_5[2], b_new_6[2], b_new_7[2], b_new_8[2], b_new_9[2] \ ///
>         b_new_1[3], b_new_2[3], b_new_3[3], b_new_4[3], b_new_5[3], b_new_6[3], b_new_7[3], b_new_8[3], b_new_9[3] \ ///
>         b_new_1[4], b_new_2[4], b_new_3[4], b_new_4[4], b_new_5[4], b_new_6[4], b_new_7[4], b_new_8[4], b_new_9[4] \ ///
>         b_new_1[5], b_new_2[5], b_new_3[5], b_new_4[5], b_new_5[5], b_new_6[5], b_new_7[5], b_new_8[5], b_new_9[5] \ ///
>         b_new_1[6], b_new_2[6], b_new_3[6], b_new_4[6], b_new_5[6], b_new_6[6], b_new_7[6], b_new_8[6], b_new_9[6] \ ///
>         b_new_1[7], b_new_2[7], b_new_3[7], b_new_4[7], b_new_5[7], b_new_6[7], b_new_7[7], b_new_8[7], b_new_9[7] \ ///
>         b_new_1[8], b_new_2[8], b_new_3[8], b_new_4[8], b_new_5[8], b_new_6[8], b_new_7[8], b_new_8[8], b_new_9[8] \ ///
>         b_new_1[9], b_new_2[9], b_new_3[9], b_new_4[9], b_new_5[9], b_new_6[9], b_new_7[9], b_new_8[9], b_new_9[9] ]
{txt}
{com}.         
. matrix e1 = [1, 0, 0, 0, 0, 0, 0, 0, 0]
{txt}
{com}. matrix e3 = [0, 0, 1, 0, 0, 0, 0, 0, 0]
{txt}
{com}. 
. * Check Validility
. matrix eigenvalues r c = B_new
{txt}
{com}. matlist B_new
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0201378}}}{space 1}{space 1}{ralign 9:{res:{sf:-2.654535}}}{space 1}{space 1}{ralign 9:{res:{sf: -7.36561}}}{space 1}{space 1}{ralign 9:{res:{sf: .0180321}}}{space 1}{space 1}{ralign 9:{res:{sf:-4.064279}}}{space 1}{space 1}{ralign 9:{res:{sf: 10.60642}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0492393}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0024521}}}{space 1}{space 1}{ralign 9:{res:{sf: .9769712}}}{space 1}{space 1}{ralign 9:{res:{sf:  .021891}}}{space 1}{space 1}{ralign 9:{res:{sf: .0013463}}}{space 1}{space 1}{ralign 9:{res:{sf: .0656722}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0587714}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0000406}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0001041}}}{space 1}{space 1}{ralign 9:{res:{sf: .0014121}}}{space 1}{space 1}{ralign 9:{res:{sf: .8016977}}}{space 1}{space 1}{ralign 9:{res:{sf: .0015502}}}{space 1}{space 1}{ralign 9:{res:{sf: .0401624}}}{space 1}{space 1}{ralign 9:{res:{sf: .1969827}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0007975}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: 3.740502}}}{space 1}{space 1}{ralign 9:{res:{sf:-3.124533}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.1133303}}}{space 1}{space 1}{ralign 9:{res:{sf: .0386268}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0205493}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0252135}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. matlist r
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .8978133}}}{space 1}{space 1}{ralign 9:{res:{sf: .9778183}}}{space 1}{space 1}{ralign 9:{res:{sf:-.5241006}}}{space 1}{space 1}{ralign 9:{res:{sf: .2052507}}}{space 1}{space 1}{ralign 9:{res:{sf: .2052507}}}{space 1}{space 1}{ralign 9:{res:{sf: .3330024}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2300788}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.1386578}}}{space 1}{space 1}{ralign 9:{res:{sf:  .032233}}}{space 1}

{com}. matlist c
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .2807834}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2807834}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. *** Calculation of eigenvalues
.         forval j = 1(1)9{c -(}
{txt}  2{com}.                 scalar eigen`j' = r[1, `j']^2 + c[1, `j']^2
{txt}  3{com}.         {c )-}
{txt}
{com}. 
.         if `=eigen1'<=1 & `=eigen2'<=1 & `=eigen3'<=1 & `=eigen4'<=1 & `=eigen5'<=1 & `=eigen6'<=1 & `=eigen7'<=1 & `=eigen8'<=1 & `=eigen9'<=1 {c -(}
.                 display "Valid"
{res}Valid
{com}.         {c )-}
{txt}
{com}.         else{c -(}
.                 display "Invalid"
.         {c )-}
{txt}
{com}. 
. * Calculate s_T s_IP s_diff s_diff_shock
. use temp/VAR_CAD_est_87_20.dta, clear
{txt}
{com}. 
. scalar N =_N
{txt}
{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         mat psi`i' = (q_dev[`i']\pi_dev[`i']\i_dev[`i']\q_dev_lag[`i']\pi_dev_lag[`i']\i_dev_lag[`i']\q_dev_lag2[`i']\pi_dev_lag2[`i']\i_dev_lag2[`i'])
{txt}  3{com}. {c )-}
{txt}
{com}. 
. matrix IP = -1*e3 * inv(I(9)-B_new)
{txt}
{com}. matrix T = -1*e1 * B_new * inv(I(9)-B_new)
{txt}
{com}. gen s_T =.
{txt}(400 missing values generated)

{com}. gen s_IP =.
{txt}(400 missing values generated)

{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         matrix temp1 = IP*psi`i'
{txt}  3{com}.         matrix temp2 = T*psi`i'
{txt}  4{com}.         quietly replace s_IP = temp1[1,1] if t == `i'
{txt}  5{com}.         quietly replace s_T = temp2[1,1] if t == `i'
{txt}  6{com}. {c )-}
{txt}
{com}. 
. gen s_diff = s_T - s_IP
{txt}(2 missing values generated)

{com}. 
. xtset cty2 t
{res}{txt}{col 8}panel variable:  {res}cty2 (strongly balanced)
{txt}{col 9}time variable:  {res}{col 25}t, 1 to 400
{txt}{col 17}delta:  {res}1 unit
{txt}
{com}. gen s_diff_shock = d.s_diff
{txt}(3 missing values generated)

{com}. gen i_diff_shock = d.i_diff
{txt}(1 missing value generated)

{com}. 
. save temp/VAR_CAD_correction_nonstationary_87_20, replace
{txt}(note: file temp/VAR_CAD_correction_nonstationary_87_20.dta not found)
file temp/VAR_CAD_correction_nonstationary_87_20.dta saved

{com}. 
. 
. ******************************************************************
. * VAR 
. ******************************************************************
. * CHF
. clear matrix
{txt}
{com}. clear
{txt}
{com}. import delimited "matrix/B_new_CHF.txt", encoding(ISO-8859-1)
{res}{text}(9 vars, 9 obs)

{com}. matrix B_new = [b_new_1[1], b_new_2[1], b_new_3[1], b_new_4[1], b_new_5[1], b_new_6[1], b_new_7[1], b_new_8[1], b_new_9[1] \ ///
>         b_new_1[2], b_new_2[2], b_new_3[2], b_new_4[2], b_new_5[2], b_new_6[2], b_new_7[2], b_new_8[2], b_new_9[2] \ ///
>         b_new_1[3], b_new_2[3], b_new_3[3], b_new_4[3], b_new_5[3], b_new_6[3], b_new_7[3], b_new_8[3], b_new_9[3] \ ///
>         b_new_1[4], b_new_2[4], b_new_3[4], b_new_4[4], b_new_5[4], b_new_6[4], b_new_7[4], b_new_8[4], b_new_9[4] \ ///
>         b_new_1[5], b_new_2[5], b_new_3[5], b_new_4[5], b_new_5[5], b_new_6[5], b_new_7[5], b_new_8[5], b_new_9[5] \ ///
>         b_new_1[6], b_new_2[6], b_new_3[6], b_new_4[6], b_new_5[6], b_new_6[6], b_new_7[6], b_new_8[6], b_new_9[6] \ ///
>         b_new_1[7], b_new_2[7], b_new_3[7], b_new_4[7], b_new_5[7], b_new_6[7], b_new_7[7], b_new_8[7], b_new_9[7] \ ///
>         b_new_1[8], b_new_2[8], b_new_3[8], b_new_4[8], b_new_5[8], b_new_6[8], b_new_7[8], b_new_8[8], b_new_9[8] \ ///
>         b_new_1[9], b_new_2[9], b_new_3[9], b_new_4[9], b_new_5[9], b_new_6[9], b_new_7[9], b_new_8[9], b_new_9[9] ]
{txt}
{com}. 
. matrix e1 = [1, 0, 0, 0, 0, 0, 0, 0, 0]
{txt}
{com}. matrix e3 = [0, 0, 1, 0, 0, 0, 0, 0, 0]
{txt}
{com}. 
. * Check Validility
. matrix eigenvalues r c = B_new
{txt}
{com}. matlist B_new
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0142615}}}{space 1}{space 1}{ralign 9:{res:{sf:-10.22623}}}{space 1}{space 1}{ralign 9:{res:{sf:-3.929619}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0141849}}}{space 1}{space 1}{ralign 9:{res:{sf: 6.346164}}}{space 1}{space 1}{ralign 9:{res:{sf:-3.856823}}}{space 1}{space 1}{ralign 9:{res:{sf: .0718762}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0015406}}}{space 1}{space 1}{ralign 9:{res:{sf: 1.137785}}}{space 1}{space 1}{ralign 9:{res:{sf: .0102233}}}{space 1}{space 1}{ralign 9:{res:{sf: 7.85e-06}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2319052}}}{space 1}{space 1}{ralign 9:{res:{sf: .0260042}}}{space 1}{space 1}{ralign 9:{res:{sf: .0002764}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0000768}}}{space 1}{space 1}{ralign 9:{res:{sf: .1542809}}}{space 1}{space 1}{ralign 9:{res:{sf: .8842504}}}{space 1}{space 1}{ralign 9:{res:{sf:  .000972}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0660613}}}{space 1}{space 1}{ralign 9:{res:{sf: .1277029}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0002313}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: 2.733272}}}{space 1}{space 1}{ralign 9:{res:{sf: 7.128317}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0311422}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0155123}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0472765}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0309118}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. matlist r
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .9936385}}}{space 1}{space 1}{ralign 9:{res:{sf: .9140516}}}{space 1}{space 1}{ralign 9:{res:{sf: -.223259}}}{space 1}{space 1}{ralign 9:{res:{sf: -.223259}}}{space 1}{space 1}{ralign 9:{res:{sf:  .328316}}}{space 1}{space 1}{ralign 9:{res:{sf:  .328316}}}{space 1}{space 1}{ralign 9:{res:{sf: .0399435}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0399435}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1613937}}}{space 1}

{com}. matlist c
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:  .346782}}}{space 1}{space 1}{ralign 9:{res:{sf: -.346782}}}{space 1}{space 1}{ralign 9:{res:{sf: .1336641}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1336641}}}{space 1}{space 1}{ralign 9:{res:{sf: .2001812}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.2001812}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. *** Calculation of eigenvalues
.         forval j = 1(1)9{c -(}
{txt}  2{com}.                 scalar eigen`j' = r[1, `j']^2 + c[1, `j']^2
{txt}  3{com}.         {c )-}
{txt}
{com}. 
.         if `=eigen1'<=1 & `=eigen2'<=1 & `=eigen3'<=1 & `=eigen4'<=1 & `=eigen5'<=1 & `=eigen6'<=1 & `=eigen7'<=1 & `=eigen8'<=1 & `=eigen9'<=1 {c -(}
.                 display "Valid"
{res}Valid
{com}.         {c )-}
{txt}
{com}.         else{c -(}
.                 display "Invalid"
.         {c )-}
{txt}
{com}. 
. * Calculate s_T s_IP s_diff s_diff_shock
. use temp/VAR_CHF_est_87_20.dta, clear
{txt}
{com}. 
. scalar N =_N
{txt}
{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         mat psi`i' = (q_dev[`i']\pi_dev[`i']\i_dev[`i']\q_dev_lag[`i']\pi_dev_lag[`i']\i_dev_lag[`i']\q_dev_lag2[`i']\pi_dev_lag2[`i']\i_dev_lag2[`i'])
{txt}  3{com}. {c )-}
{txt}
{com}. 
. 
. matrix IP = -1*e3 * inv(I(9)-B_new)
{txt}
{com}. matrix T = -1*e1 * B_new * inv(I(9)-B_new)
{txt}
{com}. gen s_T =.
{txt}(400 missing values generated)

{com}. gen s_IP =.
{txt}(400 missing values generated)

{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         matrix temp1 = IP*psi`i'
{txt}  3{com}.         matrix temp2 = T*psi`i'
{txt}  4{com}.         quietly replace s_IP = temp1[1,1] if t == `i'
{txt}  5{com}.         quietly replace s_T = temp2[1,1] if t == `i'
{txt}  6{com}. {c )-}
{txt}
{com}. 
. gen s_diff = s_T - s_IP
{txt}(2 missing values generated)

{com}. 
. xtset cty2 t
{res}{txt}{col 8}panel variable:  {res}cty2 (strongly balanced)
{txt}{col 9}time variable:  {res}{col 25}t, 1 to 400
{txt}{col 17}delta:  {res}1 unit
{txt}
{com}. gen s_diff_shock = d.s_diff
{txt}(3 missing values generated)

{com}. gen i_diff_shock = d.i_diff
{txt}(1 missing value generated)

{com}. 
. save temp/VAR_CHF_correction_nonstationary_87_20, replace
{txt}(note: file temp/VAR_CHF_correction_nonstationary_87_20.dta not found)
file temp/VAR_CHF_correction_nonstationary_87_20.dta saved

{com}. 
. ******************************************************************
. * VAR 
. ******************************************************************
. * DEM
. clear matrix
{txt}
{com}. clear
{txt}
{com}. import delimited "matrix/B_new_DEM.txt", encoding(ISO-8859-1)
{res}{text}(9 vars, 9 obs)

{com}. matrix B_new = [b_new_1[1], b_new_2[1], b_new_3[1], b_new_4[1], b_new_5[1], b_new_6[1], b_new_7[1], b_new_8[1], b_new_9[1] \ ///
>         b_new_1[2], b_new_2[2], b_new_3[2], b_new_4[2], b_new_5[2], b_new_6[2], b_new_7[2], b_new_8[2], b_new_9[2] \ ///
>         b_new_1[3], b_new_2[3], b_new_3[3], b_new_4[3], b_new_5[3], b_new_6[3], b_new_7[3], b_new_8[3], b_new_9[3] \ ///
>         b_new_1[4], b_new_2[4], b_new_3[4], b_new_4[4], b_new_5[4], b_new_6[4], b_new_7[4], b_new_8[4], b_new_9[4] \ ///
>         b_new_1[5], b_new_2[5], b_new_3[5], b_new_4[5], b_new_5[5], b_new_6[5], b_new_7[5], b_new_8[5], b_new_9[5] \ ///
>         b_new_1[6], b_new_2[6], b_new_3[6], b_new_4[6], b_new_5[6], b_new_6[6], b_new_7[6], b_new_8[6], b_new_9[6] \ ///
>         b_new_1[7], b_new_2[7], b_new_3[7], b_new_4[7], b_new_5[7], b_new_6[7], b_new_7[7], b_new_8[7], b_new_9[7] \ ///
>         b_new_1[8], b_new_2[8], b_new_3[8], b_new_4[8], b_new_5[8], b_new_6[8], b_new_7[8], b_new_8[8], b_new_9[8] \ ///
>         b_new_1[9], b_new_2[9], b_new_3[9], b_new_4[9], b_new_5[9], b_new_6[9], b_new_7[9], b_new_8[9], b_new_9[9] ]
{txt}
{com}. 
. matrix e1 = [1, 0, 0, 0, 0, 0, 0, 0, 0]
{txt}
{com}. matrix e3 = [0, 0, 1, 0, 0, 0, 0, 0, 0]
{txt}
{com}. 
. * Check Validility
. matrix eigenvalues r c = B_new
{txt}
{com}. matlist B_new
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0666197}}}{space 1}{space 1}{ralign 9:{res:{sf: -4.57045}}}{space 1}{space 1}{ralign 9:{res:{sf: 2.494949}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0153958}}}{space 1}{space 1}{ralign 9:{res:{sf:-2.193005}}}{space 1}{space 1}{ralign 9:{res:{sf:-13.33033}}}{space 1}{space 1}{ralign 9:{res:{sf: .0638659}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0021139}}}{space 1}{space 1}{ralign 9:{res:{sf: .9926402}}}{space 1}{space 1}{ralign 9:{res:{sf: .0813248}}}{space 1}{space 1}{ralign 9:{res:{sf: .0008877}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0253144}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0202385}}}{space 1}{space 1}{ralign 9:{res:{sf: .0005872}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0002551}}}{space 1}{space 1}{ralign 9:{res:{sf: .0876862}}}{space 1}{space 1}{ralign 9:{res:{sf: .9779487}}}{space 1}{space 1}{ralign 9:{res:{sf: 4.98e-06}}}{space 1}{space 1}{ralign 9:{res:{sf: -.031944}}}{space 1}{space 1}{ralign 9:{res:{sf: .1891273}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0005204}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: 2.900106}}}{space 1}{space 1}{ralign 9:{res:{sf: 11.61325}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0437637}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0332365}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf: -.072199}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1675481}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. matlist r
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .9924936}}}{space 1}{space 1}{ralign 9:{res:{sf: .9064205}}}{space 1}{space 1}{ralign 9:{res:{sf: .4771674}}}{space 1}{space 1}{ralign 9:{res:{sf: .4771674}}}{space 1}{space 1}{ralign 9:{res:{sf:-.3719139}}}{space 1}{space 1}{ralign 9:{res:{sf: -.176759}}}{space 1}{space 1}{ralign 9:{res:{sf: -.176759}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0453042}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0453042}}}{space 1}

{com}. matlist c
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .1260536}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1260536}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .3009841}}}{space 1}{space 1}{ralign 9:{res:{sf:-.3009841}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0930407}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0930407}}}{space 1}

{com}. *** Calculation of eigenvalues
.         forval j = 1(1)9{c -(}
{txt}  2{com}.                 scalar eigen`j' = r[1, `j']^2 + c[1, `j']^2
{txt}  3{com}.         {c )-}
{txt}
{com}. 
.         if `=eigen1'<=1 & `=eigen2'<=1 & `=eigen3'<=1 & `=eigen4'<=1 & `=eigen5'<=1 & `=eigen6'<=1 & `=eigen7'<=1 & `=eigen8'<=1 & `=eigen9'<=1 {c -(}
.                 display "Valid"
{res}Valid
{com}.         {c )-}
{txt}
{com}.         else{c -(}
.                 display "Invalid"
.         {c )-}
{txt}
{com}. 
. * Calculate s_T s_IP s_diff s_diff_shock
. use temp/VAR_DEM_est_87_20.dta, clear
{txt}
{com}. 
. scalar N =_N
{txt}
{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         mat psi`i' = (q_dev[`i']\pi_dev[`i']\i_dev[`i']\q_dev_lag[`i']\pi_dev_lag[`i']\i_dev_lag[`i']\q_dev_lag2[`i']\pi_dev_lag2[`i']\i_dev_lag2[`i'])
{txt}  3{com}. {c )-}
{txt}
{com}. 
. 
. matrix IP = -1*e3 * inv(I(9)-B_new)
{txt}
{com}. matrix T = -1*e1 * B_new * inv(I(9)-B_new)
{txt}
{com}. gen s_T =.
{txt}(400 missing values generated)

{com}. gen s_IP =.
{txt}(400 missing values generated)

{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         matrix temp1 = IP*psi`i'
{txt}  3{com}.         matrix temp2 = T*psi`i'
{txt}  4{com}.         quietly replace s_IP = temp1[1,1] if t == `i'
{txt}  5{com}.         quietly replace s_T = temp2[1,1] if t == `i'
{txt}  6{com}. {c )-}
{txt}
{com}. 
. gen s_diff = s_T - s_IP
{txt}(2 missing values generated)

{com}. 
. xtset cty2 t
{res}{txt}{col 8}panel variable:  {res}cty2 (strongly balanced)
{txt}{col 9}time variable:  {res}{col 25}t, 1 to 400
{txt}{col 17}delta:  {res}1 unit
{txt}
{com}. gen s_diff_shock = d.s_diff
{txt}(3 missing values generated)

{com}. gen i_diff_shock = d.i_diff
{txt}(1 missing value generated)

{com}. 
. save temp/VAR_DEM_correction_nonstationary_87_20, replace
{txt}(note: file temp/VAR_DEM_correction_nonstationary_87_20.dta not found)
file temp/VAR_DEM_correction_nonstationary_87_20.dta saved

{com}. 
. ******************************************************************
. * VAR 
. ******************************************************************
. * FRF
. clear matrix
{txt}
{com}. clear
{txt}
{com}. import delimited "matrix/B_new_FRF.txt", encoding(ISO-8859-1)
{res}{text}(9 vars, 9 obs)

{com}. matrix B_new = [b_new_1[1], b_new_2[1], b_new_3[1], b_new_4[1], b_new_5[1], b_new_6[1], b_new_7[1], b_new_8[1], b_new_9[1] \ ///
>         b_new_1[2], b_new_2[2], b_new_3[2], b_new_4[2], b_new_5[2], b_new_6[2], b_new_7[2], b_new_8[2], b_new_9[2] \ ///
>         b_new_1[3], b_new_2[3], b_new_3[3], b_new_4[3], b_new_5[3], b_new_6[3], b_new_7[3], b_new_8[3], b_new_9[3] \ ///
>         b_new_1[4], b_new_2[4], b_new_3[4], b_new_4[4], b_new_5[4], b_new_6[4], b_new_7[4], b_new_8[4], b_new_9[4] \ ///
>         b_new_1[5], b_new_2[5], b_new_3[5], b_new_4[5], b_new_5[5], b_new_6[5], b_new_7[5], b_new_8[5], b_new_9[5] \ ///
>         b_new_1[6], b_new_2[6], b_new_3[6], b_new_4[6], b_new_5[6], b_new_6[6], b_new_7[6], b_new_8[6], b_new_9[6] \ ///
>         b_new_1[7], b_new_2[7], b_new_3[7], b_new_4[7], b_new_5[7], b_new_6[7], b_new_7[7], b_new_8[7], b_new_9[7] \ ///
>         b_new_1[8], b_new_2[8], b_new_3[8], b_new_4[8], b_new_5[8], b_new_6[8], b_new_7[8], b_new_8[8], b_new_9[8] \ ///
>         b_new_1[9], b_new_2[9], b_new_3[9], b_new_4[9], b_new_5[9], b_new_6[9], b_new_7[9], b_new_8[9], b_new_9[9] ]
{txt}
{com}. 
. matrix e1 = [1, 0, 0, 0, 0, 0, 0, 0, 0]
{txt}
{com}. matrix e3 = [0, 0, 1, 0, 0, 0, 0, 0, 0]
{txt}
{com}. 
. * Check Validility
. matrix eigenvalues r c = B_new
{txt}
{com}. matlist B_new
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0390087}}}{space 1}{space 1}{ralign 9:{res:{sf:-10.10565}}}{space 1}{space 1}{ralign 9:{res:{sf: .1142394}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0243508}}}{space 1}{space 1}{ralign 9:{res:{sf: 2.998471}}}{space 1}{space 1}{ralign 9:{res:{sf:-4.718976}}}{space 1}{space 1}{ralign 9:{res:{sf:  .071008}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0022068}}}{space 1}{space 1}{ralign 9:{res:{sf:  1.13161}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0069119}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0000175}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2947783}}}{space 1}{space 1}{ralign 9:{res:{sf: .0045782}}}{space 1}{space 1}{ralign 9:{res:{sf: .0004825}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0006746}}}{space 1}{space 1}{ralign 9:{res:{sf: .0778962}}}{space 1}{space 1}{ralign 9:{res:{sf: .6489186}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0007929}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0908595}}}{space 1}{space 1}{ralign 9:{res:{sf: .1882694}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0009104}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-2.219764}}}{space 1}{space 1}{ralign 9:{res:{sf: 4.738332}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0771769}}}{space 1}{space 1}{ralign 9:{res:{sf: .0088837}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0386686}}}{space 1}{space 1}{ralign 9:{res:{sf: .1466916}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. matlist r
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .9874396}}}{space 1}{space 1}{ralign 9:{res:{sf: .8600635}}}{space 1}{space 1}{ralign 9:{res:{sf: .4807673}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2666365}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2666365}}}{space 1}{space 1}{ralign 9:{res:{sf: -.099194}}}{space 1}{space 1}{ralign 9:{res:{sf: -.099194}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .1114642}}}{space 1}{space 1}{ralign 9:{res:{sf: .1114642}}}{space 1}

{com}. matlist c
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:  .350365}}}{space 1}{space 1}{ralign 9:{res:{sf: -.350365}}}{space 1}{space 1}{ralign 9:{res:{sf: .4134755}}}{space 1}{space 1}{ralign 9:{res:{sf:-.4134755}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .2734575}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2734575}}}{space 1}

{com}. *** Calculation of eigenvalues
.         forval j = 1(1)9{c -(}
{txt}  2{com}.                 scalar eigen`j' = r[1, `j']^2 + c[1, `j']^2
{txt}  3{com}.         {c )-}
{txt}
{com}. 
.         if `=eigen1'<=1 & `=eigen2'<=1 & `=eigen3'<=1 & `=eigen4'<=1 & `=eigen5'<=1 & `=eigen6'<=1 & `=eigen7'<=1 & `=eigen8'<=1 & `=eigen9'<=1 {c -(}
.                 display "Valid"
{res}Valid
{com}.         {c )-}
{txt}
{com}.         else{c -(}
.                 display "Invalid"
.         {c )-}
{txt}
{com}. 
. * Calculate s_T s_IP s_diff s_diff_shock
. use temp/VAR_FRF_est_87_20.dta, clear
{txt}
{com}. 
. scalar N =_N
{txt}
{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         mat psi`i' = (q_dev[`i']\pi_dev[`i']\i_dev[`i']\q_dev_lag[`i']\pi_dev_lag[`i']\i_dev_lag[`i']\q_dev_lag2[`i']\pi_dev_lag2[`i']\i_dev_lag2[`i'])
{txt}  3{com}. {c )-}
{txt}
{com}. 
. 
. matrix IP = -1*e3 * inv(I(9)-B_new)
{txt}
{com}. matrix T = -1*e1 * B_new * inv(I(9)-B_new)
{txt}
{com}. gen s_T =.
{txt}(400 missing values generated)

{com}. gen s_IP =.
{txt}(400 missing values generated)

{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         matrix temp1 = IP*psi`i'
{txt}  3{com}.         matrix temp2 = T*psi`i'
{txt}  4{com}.         quietly replace s_IP = temp1[1,1] if t == `i'
{txt}  5{com}.         quietly replace s_T = temp2[1,1] if t == `i'
{txt}  6{com}. {c )-}
{txt}
{com}. 
. gen s_diff = s_T - s_IP
{txt}(2 missing values generated)

{com}. 
. xtset cty2 t
{res}{txt}{col 8}panel variable:  {res}cty2 (strongly balanced)
{txt}{col 9}time variable:  {res}{col 25}t, 1 to 400
{txt}{col 17}delta:  {res}1 unit
{txt}
{com}. gen s_diff_shock = d.s_diff
{txt}(3 missing values generated)

{com}. gen i_diff_shock = d.i_diff
{txt}(1 missing value generated)

{com}. 
. save temp/VAR_FRF_correction_nonstationary_87_20, replace
{txt}(note: file temp/VAR_FRF_correction_nonstationary_87_20.dta not found)
file temp/VAR_FRF_correction_nonstationary_87_20.dta saved

{com}. 
. ******************************************************************
. * VAR 
. ******************************************************************
. * GBP
. clear matrix
{txt}
{com}. clear
{txt}
{com}. import delimited "matrix/B_new_GBP.txt", encoding(ISO-8859-1)
{res}{text}(9 vars, 9 obs)

{com}. matrix B_new = [b_new_1[1], b_new_2[1], b_new_3[1], b_new_4[1], b_new_5[1], b_new_6[1], b_new_7[1], b_new_8[1], b_new_9[1] \ ///
>         b_new_1[2], b_new_2[2], b_new_3[2], b_new_4[2], b_new_5[2], b_new_6[2], b_new_7[2], b_new_8[2], b_new_9[2] \ ///
>         b_new_1[3], b_new_2[3], b_new_3[3], b_new_4[3], b_new_5[3], b_new_6[3], b_new_7[3], b_new_8[3], b_new_9[3] \ ///
>         b_new_1[4], b_new_2[4], b_new_3[4], b_new_4[4], b_new_5[4], b_new_6[4], b_new_7[4], b_new_8[4], b_new_9[4] \ ///
>         b_new_1[5], b_new_2[5], b_new_3[5], b_new_4[5], b_new_5[5], b_new_6[5], b_new_7[5], b_new_8[5], b_new_9[5] \ ///
>         b_new_1[6], b_new_2[6], b_new_3[6], b_new_4[6], b_new_5[6], b_new_6[6], b_new_7[6], b_new_8[6], b_new_9[6] \ ///
>         b_new_1[7], b_new_2[7], b_new_3[7], b_new_4[7], b_new_5[7], b_new_6[7], b_new_7[7], b_new_8[7], b_new_9[7] \ ///
>         b_new_1[8], b_new_2[8], b_new_3[8], b_new_4[8], b_new_5[8], b_new_6[8], b_new_7[8], b_new_8[8], b_new_9[8] \ ///
>         b_new_1[9], b_new_2[9], b_new_3[9], b_new_4[9], b_new_5[9], b_new_6[9], b_new_7[9], b_new_8[9], b_new_9[9] ]
{txt}
{com}. 
. matrix e1 = [1, 0, 0, 0, 0, 0, 0, 0, 0]
{txt}
{com}. matrix e3 = [0, 0, 1, 0, 0, 0, 0, 0, 0]
{txt}
{com}. 
. * Check Validility
. matrix eigenvalues r c = B_new
{txt}
{com}. matlist B_new
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0734079}}}{space 1}{space 1}{ralign 9:{res:{sf:-1.447075}}}{space 1}{space 1}{ralign 9:{res:{sf:-3.586133}}}{space 1}{space 1}{ralign 9:{res:{sf: .0100093}}}{space 1}{space 1}{ralign 9:{res:{sf:-5.827176}}}{space 1}{space 1}{ralign 9:{res:{sf: 1.413075}}}{space 1}{space 1}{ralign 9:{res:{sf: .0449578}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0014063}}}{space 1}{space 1}{ralign 9:{res:{sf: 1.090788}}}{space 1}{space 1}{ralign 9:{res:{sf: .0459361}}}{space 1}{space 1}{ralign 9:{res:{sf: .0002066}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0579774}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0485874}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0004196}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0013612}}}{space 1}{space 1}{ralign 9:{res:{sf:  .085001}}}{space 1}{space 1}{ralign 9:{res:{sf: .8946235}}}{space 1}{space 1}{ralign 9:{res:{sf: .0006502}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0134338}}}{space 1}{space 1}{ralign 9:{res:{sf: .2150184}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0010873}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: 4.538973}}}{space 1}{space 1}{ralign 9:{res:{sf: 2.838994}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: -.090694}}}{space 1}{space 1}{ralign 9:{res:{sf: .0190109}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0696326}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1196571}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. matlist r
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .9182513}}}{space 1}{space 1}{ralign 9:{res:{sf: .9901237}}}{space 1}{space 1}{ralign 9:{res:{sf:-.3848375}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2026369}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2026369}}}{space 1}{space 1}{ralign 9:{res:{sf: .4554392}}}{space 1}{space 1}{ralign 9:{res:{sf: .3931829}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .1318995}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0399657}}}{space 1}

{com}. matlist c
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .2140145}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2140145}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. *** Calculation of eigenvalues
.         forval j = 1(1)9{c -(}
{txt}  2{com}.                 scalar eigen`j' = r[1, `j']^2 + c[1, `j']^2
{txt}  3{com}.         {c )-}
{txt}
{com}. 
.         if `=eigen1'<=1 & `=eigen2'<=1 & `=eigen3'<=1 & `=eigen4'<=1 & `=eigen5'<=1 & `=eigen6'<=1 & `=eigen7'<=1 & `=eigen8'<=1 & `=eigen9'<=1 {c -(}
.                 display "Valid"
{res}Valid
{com}.         {c )-}
{txt}
{com}.         else{c -(}
.                 display "Invalid"
.         {c )-}
{txt}
{com}. 
. * Calculate s_T s_IP s_diff s_diff_shock
. use temp/VAR_GBP_est_87_20.dta, clear
{txt}
{com}. 
. scalar N =_N
{txt}
{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         mat psi`i' = (q_dev[`i']\pi_dev[`i']\i_dev[`i']\q_dev_lag[`i']\pi_dev_lag[`i']\i_dev_lag[`i']\q_dev_lag2[`i']\pi_dev_lag2[`i']\i_dev_lag2[`i'])
{txt}  3{com}. {c )-}
{txt}
{com}. 
. 
. matrix IP = -1*e3 * inv(I(9)-B_new)
{txt}
{com}. matrix T = -1*e1 * B_new * inv(I(9)-B_new)
{txt}
{com}. gen s_T =.
{txt}(400 missing values generated)

{com}. gen s_IP =.
{txt}(400 missing values generated)

{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         matrix temp1 = IP*psi`i'
{txt}  3{com}.         matrix temp2 = T*psi`i'
{txt}  4{com}.         quietly replace s_IP = temp1[1,1] if t == `i'
{txt}  5{com}.         quietly replace s_T = temp2[1,1] if t == `i'
{txt}  6{com}. {c )-}
{txt}
{com}. 
. gen s_diff = s_T - s_IP
{txt}(2 missing values generated)

{com}. 
. xtset cty2 t
{res}{txt}{col 8}panel variable:  {res}cty2 (strongly balanced)
{txt}{col 9}time variable:  {res}{col 25}t, 1 to 400
{txt}{col 17}delta:  {res}1 unit
{txt}
{com}. gen s_diff_shock = d.s_diff
{txt}(3 missing values generated)

{com}. gen i_diff_shock = d.i_diff
{txt}(1 missing value generated)

{com}. 
. save temp/VAR_GBP_correction_nonstationary_87_20, replace
{txt}(note: file temp/VAR_GBP_correction_nonstationary_87_20.dta not found)
file temp/VAR_GBP_correction_nonstationary_87_20.dta saved

{com}. 
. ******************************************************************
. * VAR 
. ******************************************************************
. * ITL
. clear matrix
{txt}
{com}. clear
{txt}
{com}. import delimited "matrix/B_new_ITL.txt", encoding(ISO-8859-1)
{res}{text}(9 vars, 9 obs)

{com}. matrix B_new = [b_new_1[1], b_new_2[1], b_new_3[1], b_new_4[1], b_new_5[1], b_new_6[1], b_new_7[1], b_new_8[1], b_new_9[1] \ ///
>         b_new_1[2], b_new_2[2], b_new_3[2], b_new_4[2], b_new_5[2], b_new_6[2], b_new_7[2], b_new_8[2], b_new_9[2] \ ///
>         b_new_1[3], b_new_2[3], b_new_3[3], b_new_4[3], b_new_5[3], b_new_6[3], b_new_7[3], b_new_8[3], b_new_9[3] \ ///
>         b_new_1[4], b_new_2[4], b_new_3[4], b_new_4[4], b_new_5[4], b_new_6[4], b_new_7[4], b_new_8[4], b_new_9[4] \ ///
>         b_new_1[5], b_new_2[5], b_new_3[5], b_new_4[5], b_new_5[5], b_new_6[5], b_new_7[5], b_new_8[5], b_new_9[5] \ ///
>         b_new_1[6], b_new_2[6], b_new_3[6], b_new_4[6], b_new_5[6], b_new_6[6], b_new_7[6], b_new_8[6], b_new_9[6] \ ///
>         b_new_1[7], b_new_2[7], b_new_3[7], b_new_4[7], b_new_5[7], b_new_6[7], b_new_7[7], b_new_8[7], b_new_9[7] \ ///
>         b_new_1[8], b_new_2[8], b_new_3[8], b_new_4[8], b_new_5[8], b_new_6[8], b_new_7[8], b_new_8[8], b_new_9[8] \ ///
>         b_new_1[9], b_new_2[9], b_new_3[9], b_new_4[9], b_new_5[9], b_new_6[9], b_new_7[9], b_new_8[9], b_new_9[9] ]
{txt}
{com}. 
. matrix e1 = [1, 0, 0, 0, 0, 0, 0, 0, 0]
{txt}
{com}. matrix e3 = [0, 0, 1, 0, 0, 0, 0, 0, 0]
{txt}
{com}. 
. * Check Validility
. matrix eigenvalues r c = B_new
{txt}
{com}. matlist B_new
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0414445}}}{space 1}{space 1}{ralign 9:{res:{sf:-10.73894}}}{space 1}{space 1}{ralign 9:{res:{sf:-2.065414}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0329435}}}{space 1}{space 1}{ralign 9:{res:{sf: 1.978521}}}{space 1}{space 1}{ralign 9:{res:{sf: 1.543888}}}{space 1}{space 1}{ralign 9:{res:{sf: .0475859}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0014611}}}{space 1}{space 1}{ralign 9:{res:{sf: 1.218956}}}{space 1}{space 1}{ralign 9:{res:{sf: .0457436}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0000371}}}{space 1}{space 1}{ralign 9:{res:{sf:-.3894031}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0053597}}}{space 1}{space 1}{ralign 9:{res:{sf: .0005123}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0013376}}}{space 1}{space 1}{ralign 9:{res:{sf: .1309669}}}{space 1}{space 1}{ralign 9:{res:{sf: .8019551}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0000662}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1080146}}}{space 1}{space 1}{ralign 9:{res:{sf: .3976731}}}{space 1}{space 1}{ralign 9:{res:{sf: .0002321}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: -1.43023}}}{space 1}{space 1}{ralign 9:{res:{sf: 4.565697}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0893955}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0139294}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0276261}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2230309}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. matlist r
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.5706985}}}{space 1}{space 1}{ralign 9:{res:{sf: -.163189}}}{space 1}{space 1}{ralign 9:{res:{sf: -.163189}}}{space 1}{space 1}{ralign 9:{res:{sf: .9936716}}}{space 1}{space 1}{ralign 9:{res:{sf: .8328691}}}{space 1}{space 1}{ralign 9:{res:{sf: .1528841}}}{space 1}{space 1}{ralign 9:{res:{sf: .1528841}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .4535842}}}{space 1}{space 1}{ralign 9:{res:{sf: .3735391}}}{space 1}

{com}. matlist c
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .3474447}}}{space 1}{space 1}{ralign 9:{res:{sf:-.3474447}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .2674991}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2674991}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. *** Calculation of eigenvalues
.         forval j = 1(1)9{c -(}
{txt}  2{com}.                 scalar eigen`j' = r[1, `j']^2 + c[1, `j']^2
{txt}  3{com}.         {c )-}
{txt}
{com}. 
.         if `=eigen1'<=1 & `=eigen2'<=1 & `=eigen3'<=1 & `=eigen4'<=1 & `=eigen5'<=1 & `=eigen6'<=1 & `=eigen7'<=1 & `=eigen8'<=1 & `=eigen9'<=1 {c -(}
.                 display "Valid"
{res}Valid
{com}.         {c )-}
{txt}
{com}.         else{c -(}
.                 display "Invalid"
.         {c )-}
{txt}
{com}. 
. * Calculate s_T s_IP s_diff s_diff_shock
. use temp/VAR_ITL_est_87_20.dta, clear
{txt}
{com}. 
. scalar N =_N
{txt}
{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         mat psi`i' = (q_dev[`i']\pi_dev[`i']\i_dev[`i']\q_dev_lag[`i']\pi_dev_lag[`i']\i_dev_lag[`i']\q_dev_lag2[`i']\pi_dev_lag2[`i']\i_dev_lag2[`i'])
{txt}  3{com}. {c )-}
{txt}
{com}. 
. 
. matrix IP = -1*e3 * inv(I(9)-B_new)
{txt}
{com}. matrix T = -1*e1 * B_new * inv(I(9)-B_new)
{txt}
{com}. gen s_T =.
{txt}(400 missing values generated)

{com}. gen s_IP =.
{txt}(400 missing values generated)

{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         matrix temp1 = IP*psi`i'
{txt}  3{com}.         matrix temp2 = T*psi`i'
{txt}  4{com}.         quietly replace s_IP = temp1[1,1] if t == `i'
{txt}  5{com}.         quietly replace s_T = temp2[1,1] if t == `i'
{txt}  6{com}. {c )-}
{txt}
{com}. 
. gen s_diff = s_T - s_IP
{txt}(2 missing values generated)

{com}. 
. xtset cty2 t
{res}{txt}{col 8}panel variable:  {res}cty2 (strongly balanced)
{txt}{col 9}time variable:  {res}{col 25}t, 1 to 400
{txt}{col 17}delta:  {res}1 unit
{txt}
{com}. gen s_diff_shock = d.s_diff
{txt}(3 missing values generated)

{com}. gen i_diff_shock = d.i_diff
{txt}(1 missing value generated)

{com}. 
. save temp/VAR_ITL_correction_nonstationary_87_20, replace
{txt}(note: file temp/VAR_ITL_correction_nonstationary_87_20.dta not found)
file temp/VAR_ITL_correction_nonstationary_87_20.dta saved

{com}. 
. ******************************************************************
. * VAR 
. ******************************************************************
. * JPY
. clear matrix
{txt}
{com}. clear
{txt}
{com}. import delimited "matrix/B_new_JPY.txt", encoding(ISO-8859-1)
{res}{text}(9 vars, 9 obs)

{com}. matrix B_new = [b_new_1[1], b_new_2[1], b_new_3[1], b_new_4[1], b_new_5[1], b_new_6[1], b_new_7[1], b_new_8[1], b_new_9[1] \ ///
>         b_new_1[2], b_new_2[2], b_new_3[2], b_new_4[2], b_new_5[2], b_new_6[2], b_new_7[2], b_new_8[2], b_new_9[2] \ ///
>         b_new_1[3], b_new_2[3], b_new_3[3], b_new_4[3], b_new_5[3], b_new_6[3], b_new_7[3], b_new_8[3], b_new_9[3] \ ///
>         b_new_1[4], b_new_2[4], b_new_3[4], b_new_4[4], b_new_5[4], b_new_6[4], b_new_7[4], b_new_8[4], b_new_9[4] \ ///
>         b_new_1[5], b_new_2[5], b_new_3[5], b_new_4[5], b_new_5[5], b_new_6[5], b_new_7[5], b_new_8[5], b_new_9[5] \ ///
>         b_new_1[6], b_new_2[6], b_new_3[6], b_new_4[6], b_new_5[6], b_new_6[6], b_new_7[6], b_new_8[6], b_new_9[6] \ ///
>         b_new_1[7], b_new_2[7], b_new_3[7], b_new_4[7], b_new_5[7], b_new_6[7], b_new_7[7], b_new_8[7], b_new_9[7] \ ///
>         b_new_1[8], b_new_2[8], b_new_3[8], b_new_4[8], b_new_5[8], b_new_6[8], b_new_7[8], b_new_8[8], b_new_9[8] \ ///
>         b_new_1[9], b_new_2[9], b_new_3[9], b_new_4[9], b_new_5[9], b_new_6[9], b_new_7[9], b_new_8[9], b_new_9[9] ]
{txt}
{com}. 
. matrix e1 = [1, 0, 0, 0, 0, 0, 0, 0, 0]
{txt}
{com}. matrix e3 = [0, 0, 1, 0, 0, 0, 0, 0, 0]
{txt}
{com}. 
. * Check Validility
. matrix eigenvalues r c = B_new
{txt}
{com}. matlist B_new
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0330861}}}{space 1}{space 1}{ralign 9:{res:{sf: -3.13795}}}{space 1}{space 1}{ralign 9:{res:{sf: 7.671883}}}{space 1}{space 1}{ralign 9:{res:{sf: .0779855}}}{space 1}{space 1}{ralign 9:{res:{sf: 4.619745}}}{space 1}{space 1}{ralign 9:{res:{sf:-14.59544}}}{space 1}{space 1}{ralign 9:{res:{sf: .0033252}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0000946}}}{space 1}{space 1}{ralign 9:{res:{sf: 1.131779}}}{space 1}{space 1}{ralign 9:{res:{sf: .0964673}}}{space 1}{space 1}{ralign 9:{res:{sf: .0007991}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2442935}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1226716}}}{space 1}{space 1}{ralign 9:{res:{sf: .0005709}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0001001}}}{space 1}{space 1}{ralign 9:{res:{sf: .0967967}}}{space 1}{space 1}{ralign 9:{res:{sf: .9008701}}}{space 1}{space 1}{ralign 9:{res:{sf: .0000799}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0706551}}}{space 1}{space 1}{ralign 9:{res:{sf: .2482095}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0000928}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .1106707}}}{space 1}{space 1}{ralign 9:{res:{sf: 5.559228}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0500658}}}{space 1}{space 1}{ralign 9:{res:{sf: .0427359}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0291681}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1513828}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. matlist r
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .9965337}}}{space 1}{space 1}{ralign 9:{res:{sf:  .933188}}}{space 1}{space 1}{ralign 9:{res:{sf: .3224744}}}{space 1}{space 1}{ralign 9:{res:{sf: .3224744}}}{space 1}{space 1}{ralign 9:{res:{sf: .1459219}}}{space 1}{space 1}{ralign 9:{res:{sf: .1459219}}}{space 1}{space 1}{ralign 9:{res:{sf:-.4148722}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.2863368}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0995705}}}{space 1}

{com}. matlist c
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .0836732}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0836732}}}{space 1}{space 1}{ralign 9:{res:{sf: .2077408}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2077408}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. *** Calculation of eigenvalues
.         forval j = 1(1)9{c -(}
{txt}  2{com}.                 scalar eigen`j' = r[1, `j']^2 + c[1, `j']^2
{txt}  3{com}.         {c )-}
{txt}
{com}. 
.         if `=eigen1'<=1 & `=eigen2'<=1 & `=eigen3'<=1 & `=eigen4'<=1 & `=eigen5'<=1 & `=eigen6'<=1 & `=eigen7'<=1 & `=eigen8'<=1 & `=eigen9'<=1 {c -(}
.                 display "Valid"
{res}Valid
{com}.         {c )-}
{txt}
{com}.         else{c -(}
.                 display "Invalid"
.         {c )-}
{txt}
{com}. 
. * Calculate s_T s_IP s_diff s_diff_shock
. use temp/VAR_JPY_est_87_20.dta, clear
{txt}
{com}. 
. scalar N =_N
{txt}
{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         mat psi`i' = (q_dev[`i']\pi_dev[`i']\i_dev[`i']\q_dev_lag[`i']\pi_dev_lag[`i']\i_dev_lag[`i']\q_dev_lag2[`i']\pi_dev_lag2[`i']\i_dev_lag2[`i'])
{txt}  3{com}. {c )-}
{txt}
{com}. 
. 
. matrix IP = -1*e3 * inv(I(9)-B_new)
{txt}
{com}. matrix T = -1*e1 * B_new * inv(I(9)-B_new)
{txt}
{com}. gen s_T =.
{txt}(400 missing values generated)

{com}. gen s_IP =.
{txt}(400 missing values generated)

{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         matrix temp1 = IP*psi`i'
{txt}  3{com}.         matrix temp2 = T*psi`i'
{txt}  4{com}.         quietly replace s_IP = temp1[1,1] if t == `i'
{txt}  5{com}.         quietly replace s_T = temp2[1,1] if t == `i'
{txt}  6{com}. {c )-}
{txt}
{com}. 
. gen s_diff = s_T - s_IP
{txt}(2 missing values generated)

{com}. 
. xtset cty2 t
{res}{txt}{col 8}panel variable:  {res}cty2 (strongly balanced)
{txt}{col 9}time variable:  {res}{col 25}t, 1 to 400
{txt}{col 17}delta:  {res}1 unit
{txt}
{com}. gen s_diff_shock = d.s_diff
{txt}(3 missing values generated)

{com}. gen i_diff_shock = d.i_diff
{txt}(1 missing value generated)

{com}. 
. save temp/VAR_JPY_correction_nonstationary_87_20, replace
{txt}(note: file temp/VAR_JPY_correction_nonstationary_87_20.dta not found)
file temp/VAR_JPY_correction_nonstationary_87_20.dta saved

{com}. 
. ******************************************************************
. * VAR 
. ******************************************************************
. * NOK
. clear matrix
{txt}
{com}. clear
{txt}
{com}. import delimited "matrix/B_new_NOK.txt", encoding(ISO-8859-1)
{res}{text}(9 vars, 9 obs)

{com}. matrix B_new = [b_new_1[1], b_new_2[1], b_new_3[1], b_new_4[1], b_new_5[1], b_new_6[1], b_new_7[1], b_new_8[1], b_new_9[1] \ ///
>         b_new_1[2], b_new_2[2], b_new_3[2], b_new_4[2], b_new_5[2], b_new_6[2], b_new_7[2], b_new_8[2], b_new_9[2] \ ///
>         b_new_1[3], b_new_2[3], b_new_3[3], b_new_4[3], b_new_5[3], b_new_6[3], b_new_7[3], b_new_8[3], b_new_9[3] \ ///
>         b_new_1[4], b_new_2[4], b_new_3[4], b_new_4[4], b_new_5[4], b_new_6[4], b_new_7[4], b_new_8[4], b_new_9[4] \ ///
>         b_new_1[5], b_new_2[5], b_new_3[5], b_new_4[5], b_new_5[5], b_new_6[5], b_new_7[5], b_new_8[5], b_new_9[5] \ ///
>         b_new_1[6], b_new_2[6], b_new_3[6], b_new_4[6], b_new_5[6], b_new_6[6], b_new_7[6], b_new_8[6], b_new_9[6] \ ///
>         b_new_1[7], b_new_2[7], b_new_3[7], b_new_4[7], b_new_5[7], b_new_6[7], b_new_7[7], b_new_8[7], b_new_9[7] \ ///
>         b_new_1[8], b_new_2[8], b_new_3[8], b_new_4[8], b_new_5[8], b_new_6[8], b_new_7[8], b_new_8[8], b_new_9[8] \ ///
>         b_new_1[9], b_new_2[9], b_new_3[9], b_new_4[9], b_new_5[9], b_new_6[9], b_new_7[9], b_new_8[9], b_new_9[9] ]
{txt}
{com}. 
. matrix e1 = [1, 0, 0, 0, 0, 0, 0, 0, 0]
{txt}
{com}. matrix e3 = [0, 0, 1, 0, 0, 0, 0, 0, 0]
{txt}
{com}. 
. * Check Validility
. matrix eigenvalues r c = B_new
{txt}
{com}. matlist B_new
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0771601}}}{space 1}{space 1}{ralign 9:{res:{sf:-3.956191}}}{space 1}{space 1}{ralign 9:{res:{sf: 3.054896}}}{space 1}{space 1}{ralign 9:{res:{sf: .0661588}}}{space 1}{space 1}{ralign 9:{res:{sf:  3.41396}}}{space 1}{space 1}{ralign 9:{res:{sf:-2.892925}}}{space 1}{space 1}{ralign 9:{res:{sf: .0006691}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0019299}}}{space 1}{space 1}{ralign 9:{res:{sf: 1.161336}}}{space 1}{space 1}{ralign 9:{res:{sf: .0062587}}}{space 1}{space 1}{ralign 9:{res:{sf: .0014747}}}{space 1}{space 1}{ralign 9:{res:{sf:-.3219101}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0090293}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0000576}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0025906}}}{space 1}{space 1}{ralign 9:{res:{sf: .0379349}}}{space 1}{space 1}{ralign 9:{res:{sf: .4322023}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0009137}}}{space 1}{space 1}{ralign 9:{res:{sf: .0656974}}}{space 1}{space 1}{ralign 9:{res:{sf: .5434791}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0039421}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.1627398}}}{space 1}{space 1}{ralign 9:{res:{sf: .0904019}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0900369}}}{space 1}{space 1}{ralign 9:{res:{sf:  .004958}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.1053114}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0139194}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. matlist r
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .9155113}}}{space 1}{space 1}{ralign 9:{res:{sf: .9739069}}}{space 1}{space 1}{ralign 9:{res:{sf:-.4539393}}}{space 1}{space 1}{ralign 9:{res:{sf:-.4539393}}}{space 1}{space 1}{ralign 9:{res:{sf: .1429504}}}{space 1}{space 1}{ralign 9:{res:{sf: .1429504}}}{space 1}{space 1}{ralign 9:{res:{sf: .1831043}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .1831043}}}{space 1}{space 1}{ralign 9:{res:{sf: .0370496}}}{space 1}

{com}. matlist c
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .0916402}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0916402}}}{space 1}{space 1}{ralign 9:{res:{sf: .3019643}}}{space 1}{space 1}{ralign 9:{res:{sf:-.3019643}}}{space 1}{space 1}{ralign 9:{res:{sf: .1063628}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.1063628}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. *** Calculation of eigenvalues
.         forval j = 1(1)9{c -(}
{txt}  2{com}.                 scalar eigen`j' = r[1, `j']^2 + c[1, `j']^2
{txt}  3{com}.         {c )-}
{txt}
{com}. 
.         if `=eigen1'<=1 & `=eigen2'<=1 & `=eigen3'<=1 & `=eigen4'<=1 & `=eigen5'<=1 & `=eigen6'<=1 & `=eigen7'<=1 & `=eigen8'<=1 & `=eigen9'<=1 {c -(}
.                 display "Valid"
{res}Valid
{com}.         {c )-}
{txt}
{com}.         else{c -(}
.                 display "Invalid"
.         {c )-}
{txt}
{com}. 
. * Calculate s_T s_IP s_diff s_diff_shock
. use temp/VAR_NOK_est_87_20.dta, clear
{txt}
{com}. 
. scalar N =_N
{txt}
{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         mat psi`i' = (q_dev[`i']\pi_dev[`i']\i_dev[`i']\q_dev_lag[`i']\pi_dev_lag[`i']\i_dev_lag[`i']\q_dev_lag2[`i']\pi_dev_lag2[`i']\i_dev_lag2[`i'])
{txt}  3{com}. {c )-}
{txt}
{com}. 
. 
. matrix IP = -1*e3 * inv(I(9)-B_new)
{txt}
{com}. matrix T = -1*e1 * B_new * inv(I(9)-B_new)
{txt}
{com}. gen s_T =.
{txt}(400 missing values generated)

{com}. gen s_IP =.
{txt}(400 missing values generated)

{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         matrix temp1 = IP*psi`i'
{txt}  3{com}.         matrix temp2 = T*psi`i'
{txt}  4{com}.         quietly replace s_IP = temp1[1,1] if t == `i'
{txt}  5{com}.         quietly replace s_T = temp2[1,1] if t == `i'
{txt}  6{com}. {c )-}
{txt}
{com}. 
. gen s_diff = s_T - s_IP
{txt}(2 missing values generated)

{com}. 
. xtset cty2 t
{res}{txt}{col 8}panel variable:  {res}cty2 (strongly balanced)
{txt}{col 9}time variable:  {res}{col 25}t, 1 to 400
{txt}{col 17}delta:  {res}1 unit
{txt}
{com}. gen s_diff_shock = d.s_diff
{txt}(3 missing values generated)

{com}. gen i_diff_shock = d.i_diff
{txt}(1 missing value generated)

{com}. 
. save temp/VAR_NOK_correction_nonstationary_87_20, replace
{txt}(note: file temp/VAR_NOK_correction_nonstationary_87_20.dta not found)
file temp/VAR_NOK_correction_nonstationary_87_20.dta saved

{com}. 
. ******************************************************************
. * VAR 
. ******************************************************************
. * SEK
. clear matrix
{txt}
{com}. clear
{txt}
{com}. import delimited "matrix/B_new_SEK.txt", encoding(ISO-8859-1)
{res}{text}(9 vars, 9 obs)

{com}. matrix B_new = [b_new_1[1], b_new_2[1], b_new_3[1], b_new_4[1], b_new_5[1], b_new_6[1], b_new_7[1], b_new_8[1], b_new_9[1] \ ///
>         b_new_1[2], b_new_2[2], b_new_3[2], b_new_4[2], b_new_5[2], b_new_6[2], b_new_7[2], b_new_8[2], b_new_9[2] \ ///
>         b_new_1[3], b_new_2[3], b_new_3[3], b_new_4[3], b_new_5[3], b_new_6[3], b_new_7[3], b_new_8[3], b_new_9[3] \ ///
>         b_new_1[4], b_new_2[4], b_new_3[4], b_new_4[4], b_new_5[4], b_new_6[4], b_new_7[4], b_new_8[4], b_new_9[4] \ ///
>         b_new_1[5], b_new_2[5], b_new_3[5], b_new_4[5], b_new_5[5], b_new_6[5], b_new_7[5], b_new_8[5], b_new_9[5] \ ///
>         b_new_1[6], b_new_2[6], b_new_3[6], b_new_4[6], b_new_5[6], b_new_6[6], b_new_7[6], b_new_8[6], b_new_9[6] \ ///
>         b_new_1[7], b_new_2[7], b_new_3[7], b_new_4[7], b_new_5[7], b_new_6[7], b_new_7[7], b_new_8[7], b_new_9[7] \ ///
>         b_new_1[8], b_new_2[8], b_new_3[8], b_new_4[8], b_new_5[8], b_new_6[8], b_new_7[8], b_new_8[8], b_new_9[8] \ ///
>         b_new_1[9], b_new_2[9], b_new_3[9], b_new_4[9], b_new_5[9], b_new_6[9], b_new_7[9], b_new_8[9], b_new_9[9] ]
{txt}
{com}. 
. matrix e1 = [1, 0, 0, 0, 0, 0, 0, 0, 0]
{txt}
{com}. matrix e3 = [0, 0, 1, 0, 0, 0, 0, 0, 0]
{txt}
{com}. 
. * Check Validility
. matrix eigenvalues r c = B_new
{txt}
{com}. matlist B_new
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .1080643}}}{space 1}{space 1}{ralign 9:{res:{sf:  .438366}}}{space 1}{space 1}{ralign 9:{res:{sf:-1.274473}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0154335}}}{space 1}{space 1}{ralign 9:{res:{sf:-5.579852}}}{space 1}{space 1}{ralign 9:{res:{sf: 5.910803}}}{space 1}{space 1}{ralign 9:{res:{sf: .0582201}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .0014229}}}{space 1}{space 1}{ralign 9:{res:{sf: 1.040024}}}{space 1}{space 1}{ralign 9:{res:{sf: .0329498}}}{space 1}{space 1}{ralign 9:{res:{sf: .0012352}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0430307}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0594024}}}{space 1}{space 1}{ralign 9:{res:{sf: 6.69e-06}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0052905}}}{space 1}{space 1}{ralign 9:{res:{sf: .1614187}}}{space 1}{space 1}{ralign 9:{res:{sf:  .560309}}}{space 1}{space 1}{ralign 9:{res:{sf: -.001128}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0501759}}}{space 1}{space 1}{ralign 9:{res:{sf: .2046269}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0029464}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        1}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:r1}{space 1}{c |}{space 1}{ralign 9:{res:{sf: 1.841276}}}{space 1}{space 1}{ralign 9:{res:{sf:-2.755293}}}{space 1}
{space 0}{space 0}{ralign 12:r2}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0308188}}}{space 1}{space 1}{ralign 9:{res:{sf: .0314453}}}{space 1}
{space 0}{space 0}{ralign 12:r3}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0275005}}}{space 1}{space 1}{ralign 9:{res:{sf: .1719648}}}{space 1}
{space 0}{space 0}{ralign 12:r4}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r5}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r6}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r7}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r8}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}
{space 0}{space 0}{ralign 12:r9}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{com}. matlist r
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .9137243}}}{space 1}{space 1}{ralign 9:{res:{sf: .9789668}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1933052}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1933052}}}{space 1}{space 1}{ralign 9:{res:{sf: .4083001}}}{space 1}{space 1}{ralign 9:{res:{sf: .2443918}}}{space 1}{space 1}{ralign 9:{res:{sf:-.2970437}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:real}{space 1}{c |}{space 1}{ralign 9:{res:{sf:-.0766657}}}{space 1}{space 1}{ralign 9:{res:{sf:-.0766657}}}{space 1}

{com}. matlist c
{res}
{txt}{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c1}{space 1}{space 1}{ralign 9:c2}{space 1}{space 1}{ralign 9:c3}{space 1}{space 1}{ralign 9:c4}{space 1}{space 1}{ralign 9:c5}{space 1}{space 1}{ralign 9:c6}{space 1}{space 1}{ralign 9:c7}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf: .4620749}}}{space 1}{space 1}{ralign 9:{res:{sf:-.4620749}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}{space 1}{ralign 9:{res:{sf:        0}}}{space 1}

{space 0}{space 0}{ralign 12:}{space 1}{c |}{space 1}{ralign 9:c8}{space 1}{space 1}{ralign 9:c9}{space 1}
{space 0}{hline 13}{c   +}{hline 11}{hline 11}
{space 0}{space 0}{ralign 12:complex}{space 1}{c |}{space 1}{ralign 9:{res:{sf: .1456567}}}{space 1}{space 1}{ralign 9:{res:{sf:-.1456567}}}{space 1}

{com}. *** Calculation of eigenvalues
.         forval j = 1(1)9{c -(}
{txt}  2{com}.                 scalar eigen`j' = r[1, `j']^2 + c[1, `j']^2
{txt}  3{com}.         {c )-}
{txt}
{com}. 
.         if `=eigen1'<=1 & `=eigen2'<=1 & `=eigen3'<=1 & `=eigen4'<=1 & `=eigen5'<=1 & `=eigen6'<=1 & `=eigen7'<=1 & `=eigen8'<=1 & `=eigen9'<=1 {c -(}
.                 display "Valid"
{res}Valid
{com}.         {c )-}
{txt}
{com}.         else{c -(}
.                 display "Invalid"
.         {c )-}
{txt}
{com}. 
. * Calculate s_T s_IP s_diff s_diff_shock
. use temp/VAR_SEK_est_87_20.dta, clear
{txt}
{com}. 
. scalar N =_N
{txt}
{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         mat psi`i' = (q_dev[`i']\pi_dev[`i']\i_dev[`i']\q_dev_lag[`i']\pi_dev_lag[`i']\i_dev_lag[`i']\q_dev_lag2[`i']\pi_dev_lag2[`i']\i_dev_lag2[`i'])
{txt}  3{com}. {c )-}
{txt}
{com}. 
. 
. matrix IP = -1*e3 * inv(I(9)-B_new)
{txt}
{com}. matrix T = -1*e1 * B_new * inv(I(9)-B_new)
{txt}
{com}. gen s_T =.
{txt}(400 missing values generated)

{com}. gen s_IP =.
{txt}(400 missing values generated)

{com}. 
. forval i = 1/`=N'{c -(}
{txt}  2{com}.         matrix temp1 = IP*psi`i'
{txt}  3{com}.         matrix temp2 = T*psi`i'
{txt}  4{com}.         quietly replace s_IP = temp1[1,1] if t == `i'
{txt}  5{com}.         quietly replace s_T = temp2[1,1] if t == `i'
{txt}  6{com}. {c )-}
{txt}
{com}. 
. gen s_diff = s_T - s_IP
{txt}(2 missing values generated)

{com}. 
. xtset cty2 t
{res}{txt}{col 8}panel variable:  {res}cty2 (strongly balanced)
{txt}{col 9}time variable:  {res}{col 25}t, 1 to 400
{txt}{col 17}delta:  {res}1 unit
{txt}
{com}. gen s_diff_shock = d.s_diff
{txt}(3 missing values generated)

{com}. gen i_diff_shock = d.i_diff
{txt}(1 missing value generated)

{com}. 
. save temp/VAR_SEK_correction_nonstationary_87_20, replace
{txt}(note: file temp/VAR_SEK_correction_nonstationary_87_20.dta not found)
file temp/VAR_SEK_correction_nonstationary_87_20.dta saved

{com}. 
. log close
      {txt}name:  {res}<unnamed>
       {txt}log:  {res}/Users/wangmengqi/Desktop/UW/Courses/Econ872/Secondpart/task210108/nonstationary/87_20/correction_nonstationary_87_20.smcl
  {txt}log type:  {res}smcl
 {txt}closed on:  {res} 8 Jan 2021, 18:27:45
{txt}{.-}
{smcl}
{txt}{sf}{ul off}